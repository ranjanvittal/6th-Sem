//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepth3<R,A> extends GJDepth2<R, A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
    boolean inLic;
    boolean tiling;
    String methodString = "";
    String variableString = "";
    String overall = "";
    int temps = 0;
    Set<String> globalValidStrings;
    boolean inMethod;
    Set<String> genJunkUse;
    Hashtable<String, String> typer;

    class Enum {
        public boolean lic;
        public boolean nlic;
        public Enum() {
            lic = false;
            nlic = false;
        }
    }

    class Gcd {
        public Integer gcd;
        public Integer constant;
        public boolean danger;
        public Gcd() {
            gcd = 0;
            constant = 0;
            danger = false;
        }
    }

    class StringGcd {
        public Integer gcd;
        public Integer constant;
        public String id;
    }

    public Integer gcd(Integer a, Integer b) {
        Integer a1 = new Integer(a.intValue());
        Integer a2 = new Integer(b.intValue());
        if(a1 == 0)
            return 0;
        if(a2 == 0)
            return 0;
        if( a1 < a2) {
            Integer c = a1;
            a1 = a2;
            a2 = c;
        }
        while(a1 % a2 != 0) {
            Integer c = a1%a2;
            a2 = c;
            a1 = a2;
        }
        return a2;
    }

    public boolean checkIndependency(Set<StringGcd> h1, Set<StringGcd> h2) {
        int i;
        int j;
        i = 0;
        j = 0;
        Iterator e1 = h1.iterator();
        Iterator e2 = h2.iterator();
        boolean fl = true;
        //System.out.println(h1.size());
        //System.out.println(h2.size());
        while(e1.hasNext()) {
            StringGcd g1 = (StringGcd) e1.next();
            while(e2.hasNext()) {
                StringGcd g2 = (StringGcd) e2.next();
                if(g1 != g2) {
                    if(g1.id.equals(g2.id)) {
                        if(g1.gcd == 0 || g2.gcd == 0)
                            return false;

                        if((g1.constant - g2.constant) % gcd(g1.gcd, g2.gcd) == 0)
                            return false;

                    }
                }
            }
        }
        return true;
    }
    class DistOn {

        public boolean toPrint;
        public boolean collectArray;
        public boolean hasBeenPrinted;
        public boolean dont;
        public Hashtable<String, Gcd> gcd;

        public Set<String> useVariables;
        public Set<String> defVariables;

        public Set<StringGcd> readTable;
        public Set<StringGcd> writeTable;

        public Set<String> validStrings;

        public DistOn() {
            toPrint = true;
            collectArray = false;
            useVariables = new HashSet<String>();
            defVariables = new HashSet<String>();

            writeTable = new HashSet<StringGcd>();
            readTable = new HashSet<StringGcd>();

            gcd = new Hashtable<String, Gcd>();
            validStrings = globalValidStrings;
            hasBeenPrinted = false;
            dont = false;
        }
        public void addToUse(String s) {
            useVariables.add(s);
        }
        public void addToDef(String s) {
            defVariables.add(s);
        }

        public void addAllUse(Set<String> s) {
            useVariables.addAll(s);
        }
        public boolean inUse(String s) {
            return useVariables.contains(s);
        }
        public boolean inDef(String s) {
            return defVariables.contains(s);
        }
        public boolean inScope(String s) {
            return inUse(s) || inDef(s);
        }
    }

    // p1 = p2

    public void deepCopy(Set a, Set b) {
        Iterator it = b.iterator();
        while(it.hasNext()) {
            a.add(it.next());
        }
    }

    // public void deepCopy(Set<String> a, Set<String> b) {
    //     Iterator it = b.iterator();
    //     while(it.hasNext()) {
    //         a.add(it.next());
    //     }
    // }

    // public void deepCopy(Set<Expression> a, Set<Expression> b) {
    //     Iterator it = b.iterator();
    //     while(it.hasNext()) {
    //         a.add(it.next());
    //     }
    // }

    public void deepCopy(Vector a, Vector b) {
        int i = 0;
        while(i < b.size()) {
            a.add(b.elementAt(i));
            i++;
        }
    }

    // public void deepCopy(Vector<Expression> a, Vector<Expression> b) {
    //     int i = 0;
    //     while(i < b.size()) {
    //         a.add(b.elementAt(i));
    //         i++;
    //     }
    // }



    public void deepCopy(DistOn p1, DistOn p2) {
        p1.toPrint = p2.toPrint;
        p1.collectArray = p2.collectArray;

        deepCopy(p1.useVariables, p2.useVariables);
        deepCopy(p1.defVariables, p2.defVariables);
        deepCopy(p1.writeTable, p2.writeTable);
        deepCopy(p1.readTable, p2.readTable);
        p1.gcd = new Hashtable<String, Gcd>(p2.gcd);
        p1.validStrings = p2.validStrings;

    }


    public void print(String a) {
        methodString += a;
    }

    public void print(Integer b) {
        methodString += b.toString();
    }

    public String makeVar(String type) {
        String temp = "l" + String.valueOf(temps);
        variableString += type + " " + temp + ";\n";
        temps++;
        return temp;
    }
    public void pto(String a) {
        overall += a;
    }

    class LoopAnnotate {
        int which;
        int unrollFactor;
        int tile_1;
        int tile_2;
        String myString;
        LoopAnnotate(int which, int unrollFactor, int tile_1, int tile_2, String myString) {
            this.which = which;
            this.unrollFactor = unrollFactor;
            this.tile_1 = tile_1;
            this.tile_2 = tile_2;
            this.myString = myString;
        }
    }

    public R visit(NodeList n, A argu) {
        R _ret=null;
        int _count=0;
        for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
           e.nextElement().accept(this,argu);
           _count++;
         }
        return _ret;
    }

    public R visit(NodeListOptional n, A argu) {
        if ( n.present() ) {
           R _ret=null;
           int _count=0;
           for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
                e.nextElement().accept(this,argu);
                _count++;
            }
           return _ret;
         }
        else
           return null;
    }

    public R visit(NodeOptional n, A argu) {
        if ( n.present() )
           return n.node.accept(this,argu);
        else
           return null;
    }

    public R visit(NodeSequence n, A argu) {
        R _ret=null;
        int _count=0;
        for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
           e.nextElement().accept(this,argu);
           _count++;
         }
        return _ret;
    }

    public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
    public R visit(Goal n, A argu) {
        R _ret=null;
        genJunkUse = new HashSet<String>();
        genJunkUse.add("f");
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return (R) overall;
    }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> ( VarDeclaration() )*
    * f15 -> ( Statement() )*
    * f16 -> "}"
    * f17 -> "}"
    */
    public R visit(MainClass n, A argu) {
         R _ret = null;
        String id = (String) n.f1.accept(this, argu);
        inLic = false;
        pto("class " + id + "\n{\n");
        pto("public static void main( String[] ");
        id = (String) n.f11.accept(this, argu);
        inMethod = true;
        pto(id + ")\n{\n");
        NodeListOptional n1 = n.f14;
        for(int i = 0; i < n1.size(); i++) {
            VarDeclaration v = (VarDeclaration) n1.elementAt(i);
            String type = (String) v.f0.accept(this, argu);
            String var = v.f1.f0.toString();
            pto(type + " " + var + ";\n");

        }
        n1 = n.f15;
        DistOn distOn = new DistOn();
        for(int i = 0; i < n1.size(); i++)
            n1.elementAt(i).accept(this, (A) distOn);
        pto(methodString);
        pto("}\n");
        pto("}\n");
        return _ret;
    }

   /**
    * f0 -> ClassDeclaration()
    *         | ClassExtendsDeclaration()
    */
    public R visit(TypeDeclaration n, A argu) {
        R _ret=null;
        n.f0.accept(this, argu);
        return _ret;
    }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
    public R visit(ClassDeclaration n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        inLic = false;
        String className = (String) n.f1.f0.toString();
        pto("class " + className + "\n{");
        inMethod = false;
        NodeListOptional n1 = n.f3;
        variableString = "";
        methodString = "";
        for(int i = 0; i < n1.size(); i++) {
            VarDeclaration v = (VarDeclaration) n1.elementAt(i);
            String type = (String) v.f0.accept(this, argu);
            String id = v.f1.f0.toString();
            pto(type + " " + id + ";");
        }
        n1 = n.f4;
        for(int i = 0; i < n1.size(); i++) {
            n1.elementAt(i).accept(this, argu);
        }

        pto("}\n");
        return _ret;
     }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
    public R visit(ClassExtendsDeclaration n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        inLic = false;
        String className = (String) n.f1.accept(this, argu);
        pto("class " + className);
        String extending = (String) n.f3.accept(this, argu);
        pto(" extends " + extending + "\n{");
        NodeListOptional n1 = n.f5;
        for(int i = 0; i < n1.size(); i++) {
            VarDeclaration v = (VarDeclaration) n1.elementAt(i);
            String type = (String) v.f0.accept(this, argu);
            String id = v.f1.f0.toString();
            pto(type + " " + id + ";");
        }
        n1 = n.f6;
        for(int i = 0; i < n1.size(); i++) {
            n1.elementAt(i).accept(this, argu);
        }
        pto("}\n");
        return _ret;
     }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
    public R visit(VarDeclaration n, A argu) {
        R _ret=null;
        String type = (String) n.f0.accept(this, argu);
        String id = (String) n.f1.accept(this, argu);
        variableString += type + " " + id + ";\n";
        if(inMethod && (type.equals("int") || type.equals("boolean"))) {
            globalValidStrings.add(id);
        }
        return _ret;
    }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Identifier()
    * f11 -> ";"
    * f12 -> "}"
    */
    public R visit(MethodDeclaration n, A argu) {
        R _ret=null;
        n.f0.accept(this, argu);
        inMethod = true;
        globalValidStrings = new HashSet<String>();
        typer = new Hashtable<String, String>();
        String type = (String) n.f1.accept(this, argu);
        String id = (String) n.f2.accept(this, argu);
        String fpl = (String) n.f4.accept(this, argu);
        pto("public " + type +  " " + id + "(" + fpl + ")" + "{\n");
        variableString = "";
        methodString = "";
        n.f7.accept(this, argu);
        DistOn distOn = new DistOn();
        n.f8.accept(this, (A) distOn);
        pto(variableString);
        pto(methodString);
        String id2 = (String) n.f10.accept(this, argu);
        pto("return " + id2 + ";\n}\n\n");
        inMethod = false;
        return _ret;
    }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
    public R visit(FormalParameterList n, A argu) {
        R _ret=null;
        int i;
        String arg1 = (String) n.f0.accept(this, argu);
        if(n.f1.present()) {
          Vector<Node> n1 = n.f1.nodes;
          for(i = 0; i < n1.size(); i++) {
              arg1 += (String) n1.elementAt(i).accept(this, argu);
          }
        }
        return (R) arg1;
    }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
    public R visit(FormalParameter n, A argu) {
        String type = (String) n.f0.accept(this, argu);
        String id = (String) n.f1.accept(this, argu);
        type = type + " " + id;
        globalValidStrings.add(id);
        return (R) type;
    }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
    public R visit(FormalParameterRest n, A argu) {
        String id = (String) n.f1.accept(this, argu);
        id = ", " + id;
        return (R) id;
    }

   /**
    * f0 -> ArrayType()
    *         | BooleanType()
    *         | IntegerType()
    *         | Identifier()
    */
    public R visit(Type n, A argu) {
        return n.f0.accept(this, argu);
    }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
    public R visit(ArrayType n, A argu) {
        R _ret=null;
        String id = "int[]";
        return (R) id;
    }

   /**
    * f0 -> "boolean"
    */
    public R visit(BooleanType n, A argu) {
        R _ret=null;
        String id = "boolean";
        return (R) id;
    }

   /**
    * f0 -> "int"
    */
    public R visit(IntegerType n, A argu) {
        R _ret=null;
        String id = "int";
        return (R) id;
    }

   /**
    * f0 -> Block()
    *         | AssignmentStatement()
    *         | ArrayAssignmentStatement()
    *         | FieldAssignmentStatement()
    *         | IfStatement()
    *         | WhileStatement()
    *         | ForStatement()
    *         | PrintStatement()
    */
    public R visit(Statement n, A argu) {
        R _ret=null;
        n.f0.accept(this, argu);
        return _ret;
    }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
    public R visit(Block n, A argu) {
        R _ret=null;
        DistOn distOn = (DistOn) argu;

        if(distOn.toPrint) {
            print("{\n");
            n.f1.accept(this, argu);
            print("}\n");
        }

        else
            n.f1.accept(this, argu);

        return _ret;
    }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
    public R visit(AssignmentStatement n, A argu) {
        R _ret = null;
        DistOn distOn = (DistOn) argu;
        boolean b = distOn.toPrint;
        String id = (String) n.f0.accept(this, argu);
        if(b) {
            String exp;
            exp = (String) n.f2.accept(this, argu);
            print(id + " = " + exp + ";\n");
        }
        else {
            if(!distOn.collectArray) {
                if(distOn.inScope(id))
                    distOn.gcd.put(id, new Gcd());
                Gcd gcd = (Gcd) n.f2.accept(this, argu);
                distOn.gcd.put(id, gcd);
            }
            else
                n.f2.accept(this, argu);
            if(!distOn.validStrings.contains(id))
                distOn.dont = true;
        }
        return _ret;
    }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Identifier()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> ConstOrId()
    * f6 -> ";"
    */
    public R visit(ArrayAssignmentStatement n, A argu) {
        R _ret=null;
        DistOn  distOn = (DistOn) argu;
        String id1 = (String) n.f0.accept(this, argu);
        String id2 = (String) n.f2.accept(this, argu);
        String id3;

        if(distOn.toPrint) {
            id3 = (String) n.f5.accept(this, argu);
            print(id1 + "[" + id2 + "]" + " = " + id3 + ";\n");
        }

        else if(!distOn.collectArray) {
            //distOn.addToUse(id1);
            if(n.f5.f0.which == 0)
                id3 = (String) n.f5.accept(this, argu);
            else
                id3 = String.valueOf((Integer) n.f5.accept(this, argu));
            distOn.addToUse(id2);
            if(n.f5.f0.which == 0)
                distOn.addToUse(id3);
        }
        else {
            StringGcd s = new StringGcd();
            if(distOn.gcd.containsKey(id2)) {
                Gcd g = distOn.gcd.get(id2);
                s.gcd = g.gcd;
                s.constant = g.constant;
                s.id = id1;
                if((g.danger || g.gcd == 0) && tiling)
                    distOn.dont = true;
            }
            else {
                s.gcd = 0;
                s.id = id1;
                s.constant = 0;
                distOn.dont = true;
            }
            distOn.writeTable.add(s);
        }
        return _ret;
    }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "="
    * f4 -> Identifier()
    * f5 -> ";"
    */
    public R visit(FieldAssignmentStatement n, A argu) {
        R _ret=null;
        String id1 = (String) n.f0.accept(this, argu);
        String id2 = (String) n.f2.accept(this, argu);
        String id3 = (String) n.f4.accept(this, argu);
        DistOn  distOn = (DistOn) argu;
        if(distOn.toPrint)
            print(id1 + "." + id2 + " = " + id3 + ";\n");
        else {
            distOn.dont = true;
            distOn.addToUse(id3);
        }

        return _ret;
    }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
    public R visit(IfStatement n, A argu) {
        R _ret=null;
        DistOn distOn = (DistOn) argu;
        String id = (String) n.f2.accept(this, argu);
        boolean p = false;
        Enum e = new Enum();
        if(distOn.toPrint) {
            print("if(");
            print(id + ")\n");
            n.f4.accept(this, argu);
            print("else\n");
            n.f6.accept(this, argu);
        }
        else {
            distOn.addToUse(id);
            DistOn distOn1 = new DistOn();
            DistOn distOn2 = new DistOn();
            deepCopy(distOn1, distOn);
            deepCopy(distOn2, distOn);

            n.f4.accept(this, (A) distOn1);
            n.f6.accept(this, (A) distOn2);

            Iterator it1 = distOn1.defVariables.iterator();
            Iterator it2 = distOn2.defVariables.iterator();
            while(it1.hasNext()) {
                String s = (String) it1.next();
                if(!distOn.defVariables.contains(s))
                    distOn.gcd.put(s, new Gcd());
            }

            while(it2.hasNext()) {
                String s = (String) it2.next();
                if(!distOn.defVariables.contains(s))
                    distOn.gcd.put(s, new Gcd());
            }

            distOn.defVariables.addAll(distOn1.defVariables);
            distOn.defVariables.addAll(distOn2.defVariables);

            distOn.useVariables.addAll(distOn1.useVariables);
            distOn.useVariables.addAll(distOn2.useVariables);

            distOn.writeTable.addAll(distOn1.writeTable);
            distOn.writeTable.addAll(distOn2.writeTable);

            distOn.readTable.addAll(distOn1.readTable);
            distOn.readTable.addAll(distOn2.readTable);

            distOn.dont = distOn1.dont || distOn2.dont;
        }
        return _ret;
    }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    */
    public R visit(WhileStatement n, A argu) {
        R _ret = null;
        String id = (String) n.f2.accept(this, argu);
        boolean p = false;
        DistOn distOn = (DistOn) argu;
        if(distOn.toPrint) {
            print("while(");
            print(id + ")\n");
            n.f4.accept(this, argu);
        }
        else {
            distOn.addToUse(id);
            n.f4.accept(this, argu);
        }
        return _ret;
    }

   /**
    * f0 -> ( LoopAnnotation() )?
    * f1 -> "for"
    * f2 -> "("
    * f3 -> Identifier()
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    * f7 -> Expression()
    * f8 -> ";"
    * f9 -> Identifier()
    * f10 -> "="
    * f11 -> Expression()
    * f12 -> ")"
    * f13 -> Statement()
    */
    public R visit(ForStatement n, A argu) {
        R _ret = null;
        LoopAnnotate la;
        boolean done = false;
        DistOn distOn1 = (DistOn) argu;
        boolean processed = false;

        if(n.f0.present()) {
            la = (LoopAnnotate) n.f0.accept(this, argu);
            int i = 0;
            DistOn distOn;
            String id;
            if(la.which == 3) {
                Block b = (Block) n.f13.f0.choice;
                Vector<Node> nodes = b.f1.nodes;
                tiling = false;
                id = (String) n.f3.accept(this, argu);
                distOn = new DistOn();
                DistOn distOn2 = new DistOn();
                DistOn distOn3 = new DistOn();
                Gcd g = new Gcd();
                g.gcd = 1;
                g.constant = 0;
                distOn.gcd.put(id, g);

                distOn.validStrings = globalValidStrings;
                distOn.toPrint = false;
                distOn.collectArray = false;

                deepCopy(distOn2, distOn);


                nodes.elementAt(0).accept(this, (A) distOn2);
                i++;
                deepCopy(distOn3, distOn);

                while(i < nodes.size()) {
                    nodes.elementAt(i).accept(this, (A) distOn3);
                    i++;
                }
                Set<String> intersection1 = new HashSet<String>(distOn2.useVariables);
                intersection1.retainAll(distOn3.defVariables);
                Set<String> intersection2 = new HashSet<String>(distOn3.useVariables);
                intersection2.retainAll(distOn2.defVariables);
                Set<String> intersection3 = new HashSet<String>(distOn2.defVariables);
                intersection3.retainAll(distOn3.defVariables);

                int k = intersection1.size() + intersection2.size() + intersection3.size();


                distOn.defVariables.addAll(distOn2.defVariables);
                distOn.defVariables.addAll(distOn3.defVariables);

                distOn.useVariables.addAll(distOn2.useVariables);
                distOn.useVariables.addAll(distOn3.useVariables);

                distOn.writeTable.addAll(distOn2.writeTable);
                distOn.writeTable.addAll(distOn3.writeTable);

                distOn.readTable.addAll(distOn2.readTable);
                distOn.readTable.addAll(distOn3.readTable);

                distOn.gcd = new Hashtable<String, Gcd>(distOn2.gcd);
                Enumeration it = distOn3.gcd.keys();
                while(it.hasMoreElements()) {
                    String s = (String) it.nextElement();
                    distOn.gcd.put(s, distOn3.gcd.get(s));
                }
                distOn.dont = distOn2.dont || distOn3.dont;
                if(k != 0 ||( distOn2.hasBeenPrinted && distOn3.hasBeenPrinted) || distOn.dont) {
                    distOn1.toPrint = true;
                }
                else {
                    i = 0;
                    distOn.collectArray = true;
                    distOn.toPrint = false;
                    distOn2 = new DistOn();
                    distOn3 = new DistOn();
                    deepCopy(distOn2, distOn);
                    deepCopy(distOn3, distOn);
                    nodes.elementAt(i).accept(this, (A) distOn2);
                    i++;
                    while(i < nodes.size()) {
                        nodes.elementAt(i).accept(this, (A) distOn3);
                        i++;
                    }

                    Set<StringGcd> oneWrite = distOn2.writeTable;
                    Set<StringGcd> oneRead = distOn2.readTable;
                    Set<StringGcd> twoWrite = distOn3.writeTable;
                    Set<StringGcd> twoRead = distOn3.readTable;
                    boolean l = checkIndependency(oneWrite, twoWrite);
                    l = l & checkIndependency(oneWrite, twoRead);
                    l = l & checkIndependency(twoWrite, oneRead);
                    if(l) {
                        distOn.toPrint = true;
                        print("for(");
                        print(id + "=");
                        String exp1 = (String) n.f5.accept(this, argu);
                        print(exp1 + ";");
                        String exp2 = (String) n.f7.accept(this, argu);
                        print(exp2 + ";");
                        String id1 = (String) n.f9.accept(this, argu);
                        print(id1 + " = ");
                        String exp3 = (String) n.f11.accept(this, argu);
                        print(exp3 + ")\n");
                        nodes.elementAt(0).accept(this, (A) distOn);
                        print("for(");
                        print(id + "=");
                        print(exp1 + ";");
                        print(exp2 + ";");
                        print(id1 + " = ");
                        print(exp3 + ")\n{\n");
                        i = 1;
                        while(i < nodes.size()) {
                            nodes.elementAt(i).accept(this, (A) distOn);
                            i++;
                        }
                        print("\n}\n");
                        done = true;
                        return null;
                    }
                    else
                        distOn1.toPrint = true;
                }
            }
            if(la.which == 0) {
                i = 0;
                tiling = true;
                id = (String) n.f3.accept(this, argu);
                distOn = new DistOn();

                Gcd g1 = new Gcd();
                g1.gcd = 1;
                g1.constant = 0;
                distOn.gcd.put(id, g1);

                distOn.validStrings = globalValidStrings;
                distOn.toPrint = false;
                distOn.collectArray = false;



                n.f13.accept(this, (A) distOn);

                distOn.collectArray = true;
                n.f13.accept(this, (A) distOn);
                i = 0;

                Set<StringGcd> oneWrite = distOn.writeTable;
                Set<StringGcd> oneRead = distOn.readTable;


                boolean l = checkIndependency(oneWrite, oneWrite);
                l = l & checkIndependency(oneWrite, oneRead);

                if(l && !distOn.dont) {
                    distOn.toPrint = true;
                    String t1 = makeVar("int");
                    String t2 = makeVar("int");
                    print("for(");
                    print(t1 + "= 0;");
                    CompareExpression ce = (CompareExpression) n.f7.f0.choice;
                    String id6 = (String) ce.f2.accept(this, (A) distOn);
                    print(t1 + " < " + id6 + ";");
                    print(t1 + " = " + t1 + " + " + String.valueOf(la.tile_1) + ")\n");
                    ForStatement f = (ForStatement) n.f13.f0.choice;
                    ce = (CompareExpression) f.f7.f0.choice;
                    String id7 = (String) ce.f2.accept(this, (A) distOn);
                    print("for(" + t2 + " = 0;" + t2 + " < " + id7 + ";");
                    print(t2 + " = " + t2 + " + " + String.valueOf(la.tile_2) + ") {\n");
                    String t3 = makeVar("int");
                    String t4 = makeVar("int");
                    String t5 = makeVar("boolean");
                    String t6 = makeVar("int");
                    String t7 = makeVar("boolean");
                    String t8 = makeVar("int");
                    print(t3 + " = " + t1 + " + " + String.valueOf(la.tile_1) + ";\n");
                    print(t4 + " = " + t2 + " + " + String.valueOf(la.tile_2) + ";\n");
                    print(t5 + " = " + t3 + " < " + id6 + ";\n");
                    print(t7 + " = " + t4 + " < " + id7 + ";\n");
                    print("if(" + t5 + ")\n");
                    print(t6 + " = " + t3 + ";\n");
                    print("else\n");
                    print(t6 + " = " + id6 + ";\n");
                    print("if(" + t7 + ")\n");
                    print(t8 + " = " + t4 + ";\n");
                    print("else\n");
                    print(t8 + " = " + id7 + ";\n");

                    String id8 = (String) f.f3.accept(this, (A) distOn);
                    print("for(" + id + " = " + t1 + ";" + id + " < " + t6 + ";");
                    print(id + " = " + id + " + 1)\n");
                    print("for(" + id8 + " = " + t2 + ";" + id8 + " < " + t8 + ";");
                    print(id8 + " = " + id8 + " + 1)\n");
                    f.f13.accept(this, (A) distOn);
                    print("}\n");
                    done = true;
                    return null;
                }
                else
                    distOn1.toPrint = true;
            }
        }

        if(distOn1.toPrint ) {
            if(n.f0.present()) {
                la = (LoopAnnotate) n.f0.accept(this, argu);
                print(la.myString);
            }
            print("for(");
            String id = (String) n.f3.accept(this, argu);
            print(id + "=");
            String exp1 = (String) n.f5.accept(this, argu);

            print(exp1 + ";");
            String exp2 = (String) n.f7.accept(this, argu);
            print(exp2 + ";");
            String id1 = (String) n.f9.accept(this, argu);
            print(id1 + " = ");
            String exp3 = (String) n.f11.accept(this, argu);
            print(exp3 + ")\n");
            n.f13.accept(this, argu);
            done = true;
        }

        else if(!distOn1.collectArray) {
            Expression e4 = (Expression) n.f7;
            CompareExpression ce = (CompareExpression) n.f7.f0.choice;
            String id1 = (String) ce.f0.accept(this, (A) distOn1);
            if(ce.f2.f0.which == 0) {
                Identifier i1 = (Identifier) ce.f2.f0.choice;
                distOn1.addToUse((String) i1.accept(this, argu));
            }
            Gcd g = new Gcd();
            g.gcd = 1;
            g.constant = 0;
            distOn1.gcd.put(id1, g);
            n.f13.accept(this, argu);
        }
        else
            n.f13.accept(this, argu);

        return _ret;
    }

   /**
    * f0 -> LoopTileAnn()
    *         | LoopInvariantCodeMotionAnn()
    *         | LoopUnrollAnn()
    *         | LoopDistributionAnn()
    */
    public R visit(LoopAnnotation n, A argu) {
        return n.f0.accept(this, argu);
    }

   /**
    * f0 -> <SCOMMENT1>
    * f1 -> <LOOPTILE>
    * f2 -> IntegerLiteral()
    * f3 -> IntegerLiteral()
    * f4 -> <SCOMMENT2>
    */
    public R visit(LoopTileAnn n, A argu) {
        R _ret=null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        Integer tile_1 = (Integer) n.f2.accept(this, argu);
        Integer tile_2 = (Integer) n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        String myString = "/*LOOPTILE " + tile_1.toString() + " " + tile_2.toString() + " */\n";
        return (R) new LoopAnnotate(0, 0, tile_1.intValue(), tile_2.intValue(), myString);
    }

   /**
    * f0 -> <SCOMMENT1>
    * f1 -> <LICM>
    * f2 -> <SCOMMENT2>
    */
    public R visit(LoopInvariantCodeMotionAnn n, A argu) {
        return (R) new LoopAnnotate(1, 0, 0, 0, "");
    }

   /**
    * f0 -> <SCOMMENT1>
    * f1 -> <LOOPUNROLL>
    * f2 -> IntegerLiteral()
    * f3 -> <SCOMMENT2>
    */
    public R visit(LoopUnrollAnn n, A argu) {
        Integer unrollFactor = (Integer) n.f2.accept(this, argu);
        return (R) new LoopAnnotate(2, unrollFactor.intValue(), 0, 0, "");
    }

   /**
    * f0 -> <SCOMMENT1>
    * f1 -> <LOOPDISTRIBUTE>
    * f2 -> <SCOMMENT2>
    */
    public R visit(LoopDistributionAnn n, A argu) {
        String myString = "/*LOOPDISTRIBUTE*/\n";
        return (R) new LoopAnnotate(3, 0, 0, 0, myString);
    }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> ";"
    */
    public R visit(PrintStatement n, A argu) {
        R _ret = null;
        String id = (String) n.f2.accept(this, argu);
        DistOn distOn = (DistOn) argu;
        if(distOn.toPrint)
            print("System.out.println(" + id + ");\n");

        else {
            distOn.addToUse(id);
            distOn.hasBeenPrinted = true;
            if(tiling)
                distOn.dont = true;
        }

        return _ret;
    }

   /**
    * f0 -> AndExpression()
    *         | CompareExpression()
    *         | PlusExpression()
    *         | MinusExpression()
    *         | TimesExpression()
    *         | ArrayLookup()
    *         | ArrayLength()
    *         | MessageSend()
    *         | PrimaryExpression()
    */
    public R visit(Expression n, A argu) {
        return n.f0.accept(this, argu);
    }

   /**
    * f0 -> Identifier()
    * f1 -> "&"
    * f2 -> Identifier()
    */
    public R visit(AndExpression n, A argu) {
        DistOn distOn = (DistOn) argu;
        if(distOn.toPrint) {
            String id1 = (String) n.f0.accept(this, argu);
            String id2 = (String) n.f2.accept(this, argu);
            id1 += "&" + id2;
            return (R) id1;
        }
        else {
            Gcd gcd = new Gcd();
            gcd.gcd = 0;
            gcd.constant = 0;
            String id1 = (String) n.f0.accept(this, argu);
            distOn.useVariables.add(id1);
            String id2 = (String) n.f2.accept(this, argu);
            distOn.useVariables.add(id2);
            return (R) gcd;
        }
    }

   /**
    * f0 -> ConstOrId()
    * f1 -> "<"
    * f2 -> ConstOrId()
    */
    public R visit(CompareExpression n, A argu) {
        DistOn distOn = (DistOn) argu;
        if(distOn.toPrint) {
            String id1 = (String) n.f0.accept(this, argu);
            String id2 = (String) n.f2.accept(this, argu);
            id1 += "<" + id2;
            return (R) id1;
        }
        else {
            Gcd gcd = new Gcd();
            gcd.gcd = 0;
            gcd.constant = 0;
            if(n.f0.f0.which == 0) {
                String id1 = (String) n.f0.accept(this, argu);
                distOn.useVariables.add(id1);
            }
            if(n.f2.f0.which == 0) {
                String id2 = (String) n.f2.accept(this, argu);
                distOn.useVariables.add(id2);
            }
            return (R) gcd;
        }
    }

   /**
    * f0 -> ConstOrId()
    * f1 -> "+"
    * f2 -> ConstOrId()
    */
    public R visit(PlusExpression n, A argu) {
        DistOn distOn = (DistOn) argu;
        if(distOn.toPrint) {
            String id1 = (String) n.f0.accept(this, argu);
            String id2 = (String) n.f2.accept(this, argu);
            id1 += "+" + id2;
            return (R) id1;
        }
        else {
            Gcd gcd = new Gcd();
            gcd.gcd = 0;
            gcd.constant = 0;
            String id1 = (String) n.f0.accept(this, argu);

            boolean fl = true;
            if(n.f0.f0.which == 0) {
                distOn.useVariables.add(id1);
                if(distOn.gcd.containsKey(id1)) {
                    Gcd gcd1 = distOn.gcd.get(id1);
                    gcd.gcd = gcd1.gcd;
                    gcd.constant = gcd1.constant;
                    //System.out.println(gcd.gcd + " : " + id1);
                }
                else {
                    gcd.gcd = 0;
                    gcd.constant = 0;
                    gcd.danger = true;
                }
            }
            else {
                gcd.constant =  ((Integer) n.f0.accept(this, argu)).intValue();
                fl = false;
            }
            if(n.f2.f0.which == 0) {
                String id2 = (String) n.f2.accept(this, argu);
                distOn.useVariables.add(id2);
                if(distOn.gcd.containsKey(id2)) {
                    Gcd gcd1 = distOn.gcd.get(id2);
                    if(fl) {
                        gcd.gcd = gcd(gcd.gcd, gcd1.gcd);
                        gcd.constant = gcd.constant + gcd1.constant;
                        gcd.danger = true;
                    }
                    else {
                        gcd.gcd = gcd1.gcd;
                        gcd.constant = gcd.constant + gcd1.constant;
                    }
                }
                else {
                    gcd.gcd = 0;
                    gcd.constant = 0;
                    gcd.danger = true;
                }
            }
            else {
                if(fl)
                    gcd.constant += ((Integer) n.f2.accept(this, argu)).intValue();
                else {
                    gcd.gcd = 0;
                    gcd.constant = 0;
                    gcd.danger = true;
                }
            }
            //System.out.println(id1 + ":" + gcd.gcd);
            return (R) gcd;
        }
    }

   /**
    * f0 -> ConstOrId()
    * f1 -> "-"
    * f2 -> ConstOrId()
    */
    public R visit(MinusExpression n, A argu) {
        DistOn distOn = (DistOn) argu;
        if(distOn.toPrint) {
            String id1 = (String) n.f0.accept(this, argu);
            String id2 = (String) n.f2.accept(this, argu);
            id1 += "-" + id2;
            return (R) id1;
        }
        else {
            Gcd gcd = new Gcd();
            gcd.gcd = 0;
            gcd.constant = 0;
            boolean fl = true;
            if(n.f0.f0.which == 0) {
                String id1 = (String) n.f0.accept(this, argu);
                distOn.useVariables.add(id1);
                if(distOn.gcd.containsKey(id1)) {
                    Gcd gcd1 = distOn.gcd.get(id1);
                    gcd.gcd = gcd1.gcd;
                    gcd.constant = gcd1.constant;
                }
                else {
                    gcd.gcd = 0;
                    gcd.constant = 0;
                }
            }
            else {
                gcd.constant =  - ((Integer) n.f0.accept(this, argu)).intValue();
                fl = false;
            }
            if(n.f2.f0.which == 0) {
                String id2 = (String) n.f2.accept(this, argu);
                distOn.useVariables.add(id2);
                if(distOn.gcd.containsKey(id2)) {
                    Gcd gcd1 = distOn.gcd.get(id2);
                    if(fl) {
                        gcd.gcd = gcd(gcd.gcd, gcd1.gcd);
                        gcd.constant = gcd.constant - gcd1.constant;
                        gcd.danger = true;
                    }
                    else {
                        gcd.gcd = gcd1.gcd;
                        gcd.constant = gcd.constant - gcd1.constant;
                    }
                }
                else {
                    gcd.gcd = 0;
                    gcd.constant = 0;
                }
            }
            else {
                if(fl)
                    gcd.constant -= ((Integer) n.f2.accept(this, argu)).intValue();
                else {
                    gcd.gcd = 0;
                    gcd.constant = 0;
                }

            }
            return (R) gcd;
        }
    }

    /**
    * f0 -> ConstOrId()
    * f1 -> "*"
    * f2 -> ConstOrId()
    */
    public R visit(TimesExpression n, A argu) {
        DistOn distOn = (DistOn) argu;
        if(distOn.toPrint) {
            String id1 = (String) n.f0.accept(this, argu);
            String id2 = (String) n.f2.accept(this, argu);
            id1 += "*" + id2;
            return (R) id1;
        }
        else {
            Gcd gcd = new Gcd();
            gcd.gcd = 0;
            gcd.constant = 0;
            boolean fl = true;
            if(n.f0.f0.which == 0) {
                String id1 = (String) n.f0.accept(this, argu);
                distOn.useVariables.add(id1);
                if(distOn.gcd.containsKey(id1)) {
                    Gcd gcd1 = distOn.gcd.get(id1);
                    gcd.gcd = gcd1.gcd;
                    gcd.constant = gcd1.constant;
                }
                else {
                    gcd.gcd = 0;
                    gcd.constant = 0;
                }
            }
            else {
                gcd.constant =  ((Integer) n.f0.accept(this, argu)).intValue();
                fl = false;
            }
            if(n.f2.f0.which == 0) {
                String id2 = (String) n.f2.accept(this, argu);
                distOn.useVariables.add(id2);
                if(distOn.gcd.containsKey(id2)) {
                    Gcd gcd1 = distOn.gcd.get(id2);
                    if(fl) {
                        gcd.gcd = 0;
                        gcd.constant = 0;
                    }
                    else {
                        gcd.gcd = gcd.constant*gcd1.gcd;
                        gcd.constant = gcd.constant * gcd1.constant;
                    }
                }
                else {
                    gcd.gcd = 0;
                    gcd.constant = 0;
                }
            }
            else {
                if(fl) {
                    gcd.constant *= (Integer) n.f2.accept(this, argu);
                    gcd.gcd *= (Integer) n.f2.accept(this, argu);
                }
                else {
                    gcd.gcd = 0;
                    gcd.constant = 0;
                }
            }
            return (R) gcd;
        }
    }
   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Identifier()
    * f3 -> "]"
    */
    public R visit(ArrayLookup n, A argu) {
        R _ret=null;
        DistOn distOn = (DistOn) argu;
        if(distOn.toPrint) {
            String id1 = (String) n.f0.accept(this, argu);
            String id2 = (String) n.f2.accept(this, argu);
            id1 = id1 + "[" + id2 + "]";
            return (R) id1;
        }
        else {
            if(!distOn.collectArray) {
                distOn.addToUse((String) n.f2.accept(this, argu));
                Gcd g = new Gcd();
                g.gcd = 0;
                g.constant = 0;
                return (R) g;
            }
            else {
                StringGcd g = new StringGcd();
                g.id = (String) n.f0.accept(this, argu);
                String gen = (String) n.f2.accept(this, argu);
                if(distOn.gcd.containsKey(gen)) {
                    Gcd g1 = distOn.gcd.get(gen);
                    g.gcd = g1.gcd;
                    g.constant = g1.constant;
                }
                else {
                    g.gcd = 0;
                    g.constant = 0;
                }
                distOn.readTable.add(g);
                Gcd g2 = new Gcd();
                g2.gcd = 0;
                g2.constant = 0;
                return (R) g2;
            }
        }
    }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> "length"
    */
    public R visit(ArrayLength n, A argu) {
        R _ret=null;
        DistOn distOn = (DistOn) argu;
        if(distOn.toPrint) {
            String id = (String) n.f0.accept(this, argu);
            id = id + ".length";
            return (R) id;
        }
        else {
            Gcd g2 = new Gcd();
            g2.gcd = 0;
            g2.constant = 0;
            return (R) g2;
        }
    }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ArgList() )?
    * f5 -> ")"
    */
    public R visit(MessageSend n, A argu) {
        R _ret=null;
        DistOn distOn = (DistOn) argu;
        String pe;
        if(distOn.toPrint) {
            pe = (String) n.f0.accept(this, argu);
            String id = (String) n.f2.accept(this, argu);
            n.f3.accept(this, argu);
            String arg = (String) n.f4.accept(this, argu);
            pe = pe + "." + id + "(" + arg + ")";
            return (R) pe;
        }
        else {
            n.f4.accept(this, argu);
            Gcd gcd = new Gcd();
            gcd.gcd = 0;
            gcd.constant = 0;
            distOn.dont = true;
            return (R) gcd;
        }
    }

   /**
    * f0 -> Identifier()
    * f1 -> ( ArgRest() )*
    */
    public R visit(ArgList n, A argu) {
        String arg1;
        DistOn distOn = (DistOn) argu;
        arg1 = (String) n.f0.accept(this, argu);
        distOn.addToUse(arg1);
        int i;

        Gcd gcd = new Gcd();
        gcd.gcd = 0;
        gcd.constant = 0;
        Vector<Node> n1 = n.f1.nodes;
        for(i = 0; i < n1.size(); i++) {
            if(distOn.toPrint)
                arg1 += (String) n1.elementAt(i).accept(this, argu);
            else if(!distOn.collectArray)
                distOn.addToUse((String) n1.elementAt(i).accept(this, argu));
        }
        if(distOn.toPrint)
            return (R) arg1;
        else
            return (R) gcd;
    }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
    public R visit(ArgRest n, A argu) {
        DistOn distOn = (DistOn) argu;
        String id = (String) n.f1.accept(this, argu);
        if(distOn.toPrint) {
            id = ", " + id;
            return (R) id;
        }
        else
            return (R) id;
    }

   /**
    * f0 -> IntegerLiteral()
    *         | TrueLiteral()
    *         | FalseLiteral()
    *         | Identifier()
    *         | ThisExpression()
    *         | ArrayAllocationExpression()
    *         | AllocationExpression()
    *         | NotExpression()
    */
    public R visit(PrimaryExpression n, A argu) {
        DistOn distOn = (DistOn) argu;
        if(distOn.toPrint) {
            if(n.f0.which == 0) {
                Integer in = (Integer) n.f0.accept(this,argu);
                return (R) in.toString();
            }
            return n.f0.accept(this, argu);
        }
        else {
            if(n.f0.which == 3) {
                String s = (String) n.f0.accept(this, argu);
                if(distOn.gcd.containsKey(s))
                    return (R) distOn.gcd.get(s);
                else {
                    Gcd g = new Gcd();
                    g.gcd = 0;
                    g.constant = 0;
                    return (R) g;
                }
            }

            else {
                Gcd g = new Gcd();
                g.gcd = 0;
                g.constant = 0;
                if(n.f0.which == 4 || n.f0.which == 5 || n.f0.which == 6)
                    distOn.dont = true;
                return (R) g;
            }
        }
    }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
    public R visit(IntegerLiteral n, A argu) {
        return (R) Integer.valueOf(n.f0.toString());
    }

   /**
    * f0 -> "true"
    */
    public R visit(TrueLiteral n, A argu) {
        String id = "true";
        return (R) id;
    }

   /**
    * f0 -> "false"
    */
    public R visit(FalseLiteral n, A argu) {
        String id = "false";
        return (R) id;
    }

   /**
    * f0 -> <IDENTIFIER>
    */
    public R visit(Identifier n, A argu) {
        String id = n.f0.toString();
        //id = "LoopyTaco" + id;
        return (R) id;
    }

   /**
    * f0 -> Identifier()
    *         | IntegerLiteral()
    *         | TrueLiteral()
    *         | FalseLiteral()
    */
    public R visit(ConstOrId n, A argu) {
        DistOn distOn = (DistOn) argu;
        if(distOn.toPrint) {
            if(n.f0.which == 1) {
                Integer in = (Integer) n.f0.accept(this,argu);
                return (R) in.toString();
            }
            return n.f0.accept(this, argu);
        }
        else {
            if(n.f0.which == 0) {
                String s = (String) n.f0.accept(this, argu);
                if(!distOn.collectArray)
                    distOn.addToUse(s);
            }
            return (R) n.f0.accept(this, argu);
        }
    }

   /**
    * f0 -> "this"
    */
    public R visit(ThisExpression n, A argu) {
        R _ret = null;
        DistOn distOn = (DistOn) argu;
        if(distOn.toPrint) {
            String id = "this";
            return (R) id;
        }
        else
           return _ret;
    }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Identifier()
    * f4 -> "]"
    */
    public R visit(ArrayAllocationExpression n, A argu) {
        String id = (String) n.f3.accept(this, argu);
        R _ret = null;
        DistOn distOn = (DistOn) argu;
        distOn.addToUse(id);
        if(distOn.toPrint) {
            id = "new int[" + id  + "]";
            return (R) id;
        }
        else
            return _ret;
    }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
    public R visit(AllocationExpression n, A argu) {
        String id = (String) n.f1.accept(this, argu);
        R _ret = null;
        DistOn distOn = (DistOn) argu;
        if(distOn.toPrint) {
            id = "new " + id + "()";
            return (R) id;
        }
        else
            return _ret;
    }

   /**
    * f0 -> "!"
    * f1 -> Identifier()
    */
    public R visit(NotExpression n, A argu) {
        R _ret = null;
        DistOn distOn = (DistOn) argu;
        String id = (String) n.f1.accept(this, argu);
        if(distOn.toPrint) {
            id = "!" + id;
            return (R) id;
        }
        else {
            if(!distOn.collectArray)
                distOn.addToUse(id);
            return _ret;
        }
    }

}
