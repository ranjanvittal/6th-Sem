//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepth2<R,A> extends GJDepthFirst<R,A> {
    //
    // Auto class visitors--probably don't need to be overridden.
    //

    String variableStrings = "";
    String methodStrings = "";
    String className;
    boolean inClass;
    int temps = 0;
    String methodString = "";
    String variableString = "";
    String overall = "";

    String currentClass;
    Hashtable<String, String> classVariable;
    Hashtable<String, String> currentVariables;
    Set<String> inlinedClassMethod = new HashSet<String>();
    boolean inlining = false;
    Vector<Hashtable<String, String>> inliningStack = new Vector<Hashtable<String, String>>();
    Vector<Set<String>> specialVarsStack = new Vector<Set<String>>();

    Hashtable<String, Set<String>> dangerMethods;
    Hashtable<String, Hashtable<String, String>> classMethods;
    Hashtable<String, Hashtable<String, String>> classVariables;
    Hashtable<String, Hashtable<String, MethodDeclaration>> classMethodDescription;
    String newMethod = "";

    Hashtable<String, String> currentClassVariables;

    public String makeVar(String type) {
        String id = "temp" + temps++;
        ptv(type + " " + id + ";\n");
        return id;
    }

    public void print(String s) {
        System.out.println(s);
    }

    public boolean isDanger(String klass, String method) {
        return dangerMethods.get(klass).contains(method);
    }


    public void ptm(String a) {
        methodString +=  a;
    }

    public void ptm(Integer a) {
        methodString +=  a.toString();
    }

    public void ptnm(String a) {
        newMethod += a;
    }

    public void ptv(String a) {
        variableString +=  a;
    }

    public void ptv(Integer a) {
        variableString +=  a.toString();
    }

    public String makeVar() {
        String temp = "temp" + String.valueOf(temps);
        variableString += "int " + temp + ";\n";
        temps++;
        return temp;
    }

    public void pto(String a) {
        overall +=   a;
    }

    public R visit(NodeList n, A argu) {
        R _ret = null;
        int _count = 0;
        for ( Enumeration<Node> e  =  n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
        }
        return _ret;
    }

    public R visit(NodeListOptional n, A argu) {
        if ( n.present() ) {
            R _ret = null;
            int _count = 0;
            for ( Enumeration<Node> e  =  n.elements(); e.hasMoreElements(); ) {
                e.nextElement().accept(this,argu);
                _count++;
            }
            return _ret;
        }
        else
            return null;
    }

    public R visit(NodeOptional n, A argu) {
        if ( n.present() )
            return n.node.accept(this,argu);
        else
            return null;
    }

    public R visit(NodeSequence n, A argu) {
        R _ret = null;
        int _count = 0;
        for ( Enumeration<Node> e  =  n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
        }
        return _ret;
    }

    public R visit(NodeToken n, A argu) { return null; }

    //
    // User-generated visitor methods below
    //

    /**
     * f0 -> MainClass()
     * f1 -> ( TypeDeclaration() )*
     * f2 -> <EOF>
     */
    public R visit(Goal n, A argu) {
        R _ret = null;
        PassOn passOn = (PassOn) argu;
        classMethodDescription = passOn.passOnClassMethodDescription;
        classVariables = passOn.passOnClassVariables;
        classMethods = passOn.passOnClassMethods;
        dangerMethods = passOn.passOnDangerMethods;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        print(overall);
        return _ret;
    }

    /**
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "{"
     * f3 -> "public"
     * f4 -> "static"
     * f5 -> "void"
     * f6 -> "main"
     * f7 -> "("
     * f8 -> "String"
     * f9 -> "["
     * f10 -> "]"
     * f11 -> Identifier()
     * f12 -> ")"
     * f13 -> "{"
     * f14 -> ( VarDeclaration() )*
     * f15 -> ( Statement() )*
     * f16 -> "}"
     * f17 -> "}"
     */
    public R visit(MainClass n, A argu) {
        R _ret = null;
        inClass = false;

        n.f0.accept(this, argu);
        String s = "funkyTaco" + n.f1.f0.toString();
        currentVariables = new Hashtable<String, String>();
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        n.f6.accept(this, argu);
        n.f7.accept(this, argu);
        n.f8.accept(this, argu);
        n.f9.accept(this, argu);
        n.f10.accept(this, argu);

        String s1 = "funkyTaco" + n.f11.f0.toString();
        pto("class " + s + " {\npublic static void main(String[] " + s1 + ") {\n");

        variableString = "";
        methodString = "";
        n.f12.accept(this, argu);
        n.f13.accept(this, argu);
        n.f14.accept(this, argu);
        n.f15.accept(this, argu);
        n.f16.accept(this, argu);
        n.f17.accept(this, argu);
        pto(variableString);
        pto(methodString);
        pto("\n}\n}\n");
        return _ret;
    }

    /**
     * f0 -> ClassDeclaration()
     *         | ClassExtendsDeclaration()
     */
    public R visit(TypeDeclaration n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "{"
     * f3 -> ( VarDeclaration() )*
     * f4 -> ( MethodDeclaration() )*
     * f5 -> "}"
     */
    public R visit(ClassDeclaration n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        className = (String) n.f1.accept(this, argu);
        currentClassVariables = new Hashtable<String, String>();
        currentClassVariables.put("this", className);

        newMethod = "";
        n.f2.accept(this, argu);
        inClass = true;
        pto("class " + className + "\n{\n");
        n.f3.accept(this, argu);
        pto(newMethod);
        inClass = false;
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        pto("\n}\n");
        return _ret;
    }

    /**
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "extends"
     * f3 -> Identifier()
     * f4 -> "{"
     * f5 -> ( VarDeclaration() )*
     * f6 -> ( MethodDeclaration() )*
     * f7 -> "}"
     */
    public R visit(ClassExtendsDeclaration n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        className = (String) n.f1.accept(this, argu);
        currentClassVariables = new Hashtable<String, String>();
        currentClassVariables.put("this", className);
        n.f2.accept(this, argu);
        String parent = (String) n.f4.accept(this, argu);
        inClass = true;
        n.f5.accept(this, argu);
        inClass = false;
        pto("class " + className + " extends " + parent + "\n{\n");
        n.f6.accept(this, argu);
        n.f7.accept(this, argu);
        pto("\n}\n");
        return _ret;
    }

    /**
     * f0 -> Type()
     * f1 -> Identifier()
     * f2 -> ";"
     */
    public R visit(VarDeclaration n, A argu) {
        R _ret = null;
        if(inlining) {
            String type = (String) n.f0.accept(this, argu);
            String variable = "funkyTaco" + n.f1.f0.toString();
            String renamed = makeVar(type);
            currentVariables.put(renamed, type);
            inliningStack.elementAt(inliningStack.size()-1).put(variable, renamed);
        }
        else if(inClass){
            String type = (String) n.f0.accept(this, argu);
            String variable = "funkyTaco" + n.f1.f0.toString();
            String classLength = (new Integer(className.length())).toString();
            pto(type + " " + variable + ";\n");
            ptnm("public " + type + " get_" + className + "_" + variable + "_" + classLength + "() {\n");
            ptnm("return " + variable + ";\n}\n");
            currentClassVariables.put(variable, type);
        }
        else {
            String type = (String) n.f0.accept(this, argu);
            String variable = "funkyTaco" + n.f1.f0.toString();
            pto(type + " " + variable + ";\n");
            currentVariables.put(variable, type);
        }

        return _ret;
    }

    /**
     * f0 -> "public"
     * f1 -> Type()
     * f2 -> Identifier()
     * f3 -> "("
     * f4 -> ( FormalParameterList() )?
     * f5 -> ")"
     * f6 -> "{"
     * f7 -> ( VarDeclaration() )*
     * f8 -> ( Statement() )*
     * f9 -> "return"
     * f10 -> Identifier()
     * f11 -> ";"
     * f12 -> "}"
     */
    public R visit(MethodDeclaration n, A argu) {
        R _ret = null;
        String type = (String) n.f1.accept(this, argu);
        String method = (String) n.f2.accept(this, argu);
        String fpl = "";
        if(n.f4.present())
            fpl = (String) n.f4.accept(this, argu);
        pto("public " + type + " " + method + "(" + fpl + ")" + " { \n");
        currentVariables = new Hashtable<String, String>(currentClassVariables);
        inlining = false;
        variableString = "";
        methodString = "";
        n.f7.accept(this, argu);
        n.f8.accept(this, argu);
        pto(variableString);
        pto(methodString);
        inlining = false;
        pto("return " + (String) n.f10.accept(this, argu) + ";");
        pto("\n}\n");
        return _ret;
    }

    /**
     * f0 -> FormalParameter()
     * f1 -> ( FormalParameterRest() )*
     */
    public R visit(FormalParameterList n, A argu) {
        R _ret = null;
        String s = (String) n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        int i = 0;
        while( i < n.f1.nodes.size()) {
           s += (String) n.f1.elementAt(i).accept(this, argu);
           i = i+1;
        }
        return (R) s;
    }

    /**
     * f0 -> Type()
     * f1 -> Identifier()
     */
    public R visit(FormalParameter n, A argu) {
        R _ret = null;
        String s = (String) n.f0.accept(this, argu);
        s = s + " " + (String) n.f1.accept(this, argu);
        return (R) s;
    }

    /**
     * f0 -> ","
     * f1 -> FormalParameter()
     */
    public R visit(FormalParameterRest n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        String s = ", " + (String) n.f1.accept(this, argu);
        return (R) s;
    }

    /**
     * f0 -> ArrayType()
     *         | BooleanType()
     *         | IntegerType()
     *         | Identifier()
     */
    public R visit(Type n, A argu) {
        if(n.f0.which == 3) {
            String s = "funkyTaco" + ((Identifier) n.f0.choice).f0.toString();
            return (R) s;
        }
        return n.f0.accept(this, argu);
    }

    /**
     * f0 -> "int"
     * f1 -> "["
     * f2 -> "]"
     */
    public R visit(ArrayType n, A argu) {
        String type = "int[]";
        return (R) type;
    }

    /**
     * f0 -> "boolean"
     */
    public R visit(BooleanType n, A argu) {
        String type = "boolean";
        return (R) type;
    }

    /**
     * f0 -> "int"
     */
    public R visit(IntegerType n, A argu) {
        String type = "int";
        return (R) "int";
    }

    /**
     * f0 -> Block()
     *         | AssignmentStatement()
     *         | ArrayAssignmentStatement()
     *         | FieldAssignmentStatement()
     *         | IfStatement()
     *         | WhileStatement()
     *         | ForStatement()
     *         | PrintStatement()
     *         | MessageSendStatement()
     */
    public R visit(Statement n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "{"
     * f1 -> ( Statement() )*
     * f2 -> "}"
     */
    public R visit(Block n, A argu) {
        R _ret = null;
        ptm("{\n");
        n.f1.accept(this, argu);
        ptm("\n}\n");
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> " = "
     * f2 -> Expression()
     * f3 -> ";"
     */
    public R visit(AssignmentStatement n, A argu) {
        R _ret = null;

        n.f0.accept(this, argu);
        String id = (String) n.f0.accept(this, argu);
        n.f2.accept(this, argu);
        String exp = (String) n.f2.accept(this, argu);
        ptm(id + " = " + exp + ";\n");
        if(inlining && specialVarsStack.contains(id)) {
            String currentThis = inliningStack.elementAt(inliningStack.size()-1).get("this");
            ptm(currentThis + ".funkyTaco" + n.f0.f0.toString() + " = " + id + ";\n");
        }

        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "["
     * f2 -> Identifier()
     * f3 -> "]"
     * f4 -> " = "
     * f5 -> ConstOrId()
     * f6 -> ";"
     */
    public R visit(ArrayAssignmentStatement n, A argu) {
        R _ret = null;
        String id1 = (String) n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String id2 = (String) n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        String id3 = (String) n.f5.accept(this, argu);
        n.f6.accept(this, argu);
        ptm(id1 + "[" + id2 + "]" + " = " + id3 + ";\n");
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "."
     * f2 -> Identifier()
     * f3 -> " = "
     * f4 -> Identifier()
     * f5 -> ";"
     */
    public R visit(FieldAssignmentStatement n, A argu) {
        R _ret = null;
        String id1 = (String) n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String id2 = "funkyTaco" + (String) n.f2.f0.toString();
        n.f3.accept(this, argu);
        String id3 = (String) n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        ptm(id1 + "." + id2 + " = " + id3 + ";\n");
        return _ret;
    }

    /**
     * f0 -> "if"
     * f1 -> "("
     * f2 -> Identifier()
     * f3 -> ")"
     * f4 -> Statement()
     * f5 -> "else"
     * f6 -> Statement()
     */
    public R visit(IfStatement n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String id1 = (String) n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        ptm("if(" + id1 + ")\n");
        n.f4.accept(this, argu);
        ptm("else\n");
        n.f5.accept(this, argu);
        n.f6.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "while"
     * f1 -> "("
     * f2 -> Identifier()
     * f3 -> ")"
     * f4 -> Statement()
     */
    public R visit(WhileStatement n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String id = (String) n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        ptm("while(" + id + ")\n");
        n.f4.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "for"
     * f1 -> "("
     * f2 -> Identifier()
     * f3 -> " = "
     * f4 -> Expression()
     * f5 -> ";"
     * f6 -> Expression()
     * f7 -> ";"
     * f8 -> Identifier()
     * f9 -> " = "
     * f10 -> Expression()
     * f11 -> ")"
     * f12 -> Statement()
     */
    public R visit(ForStatement n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String id1 = (String) n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        String exp1 = (String) n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        String exp2 = (String) n.f6.accept(this, argu);
        n.f7.accept(this, argu);
        String id3 = (String) n.f8.accept(this, argu);
        n.f9.accept(this, argu);
        String exp3 = (String) n.f10.accept(this, argu);
        n.f11.accept(this, argu);
        ptm("for(" + id1 + " = " + exp1 + ";" + exp2 + ";" + id3 + " = " + exp3 + ")\n");
        n.f12.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "System.out.println"
     * f1 -> "("
     * f2 -> ConstOrId()
     * f3 -> ")"
     * f4 -> ";"
     */
    public R visit(PrintStatement n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String id = (String) n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        ptm("System.out.println(" + id + ");\n");
        return _ret;
    }



    /**
     * f0 -> ( InlineAnn() )?
     * f1 -> ( VoidMessageSendStmt() | RetMessageSendStmt() )
     */
    public R visit(MessageSendStatement n, A argu) {
        R _ret = null;
        boolean oldInlining = inlining;
        Hashtable<String, String> backup = currentVariables;
        boolean fl = true;
        String variable;
        String renamed;
        String type;
        String method;
        String klass;
        String caller;
        MessageSend ms = null;
        String parameter;
        boolean goAhead = false;

        int i;
        if(n.f0.present()) {

            fl = false;
            if(n.f1.which == 0) {
                VoidMessageSendStmt n1 = (VoidMessageSendStmt) n.f1.choice;
                ms = (MessageSend) n1.f0;
            }
            if(n.f1.which == 1) {
                RetMessageSendStmt n2 = (RetMessageSendStmt) n.f1.choice;
                ms = (MessageSend) n2.f2;
            }

            caller = (String) ms.f0.accept(this, argu);

            klass = currentVariables.get(caller);
            //print(caller);
            //print(klass);
            method = "funkyTaco" + ms.f2.f0.toString();
            //print(method);
            //System.out.println(inlining);
            //print("here");
            //print(methodString);

            goAhead = !dangerMethods.get(klass).contains(method);
            String klassLength = (new Integer(klass.length())).toString();
            String klassMethod = klass + "_" + method + "_" + klassLength;
            goAhead = goAhead & !inlinedClassMethod.contains(klassMethod);

            if(goAhead) {
                Hashtable<String, String> renamedVariables = new Hashtable<String, String>();
                inlinedClassMethod.add(klassMethod);

                ptm("\n{\n");

                Hashtable<String, String> h1 = classVariables.get(klass);
                currentVariables = new Hashtable<String, String>();

                Enumeration<String> en = h1.keys();
                Set<String> specialVars = new HashSet<String>();
                renamed = makeVar(klass);
                ptm(renamed + " = " + caller + ";\n");
                renamedVariables.put("this", renamed);
                currentVariables.put(renamed, klass);
                while(en.hasMoreElements()) {
                    variable = en.nextElement();
                    type = h1.get(variable);
                    renamed = (String) makeVar(type);
                    currentVariables.put(variable, type);
                    renamedVariables.put(variable, renamed);
                    ptm(renamed + " = " + caller + ".get_" + klass + "_" + variable + "_" + klassLength + "();\n");
                    specialVars.add(renamed);

                }
                i = 0;
                specialVarsStack.add(specialVars);
                MethodDeclaration md = classMethodDescription.get(klass).get(method);
                if(ms.f4.present()) {
                    ArgList al = (ArgList) ms.f4.node;
                    FormalParameterList fpl = (FormalParameterList) md.f4.node;
                    Vector<Node> nlo2 = al.f1.nodes;

                    variable = (String) al.f0.accept(this, argu);
                    FormalParameter fp = fpl.f0;
                    type = (String) fp.f0.accept(this, argu);
                    renamed = makeVar(type);
                    ptm(renamed + " = " + variable + ";\n");

                    parameter = "funkyTaco" + fpl.f0.f1.f0.toString();
                    NodeListOptional nlo = fpl.f1;
                    Vector<Node> vectorFormalParameter = nlo.nodes;

                    if(nlo.present()) {
                        renamedVariables.put(parameter, renamed);
                        int size = nlo2.size();

                        i = 0;
                        while(i < size) {
                            FormalParameterRest fpr = (FormalParameterRest) vectorFormalParameter.elementAt(i);
                            ArgRest ar = (ArgRest) nlo2.elementAt(i);
                            variable = (String) ar.f1.accept(this, argu);
                            type = (String) fpr.f1.f0.accept(this, argu);

                            renamed = makeVar(type);
                            ptm(renamed + " = " + variable + ";\n");
                            parameter = "funkyTaco" + fpr.f1.f1.f0.toString();
                            renamedVariables.put(parameter, renamed);
                            i++;
                        }
                    }

                }
                inliningStack.add(renamedVariables);
                inlining = true;
                md.f7.accept(this, argu);
                md.f8.accept(this, argu);
                String ret = (String) md.f10.accept(this, argu);

                int size = inliningStack.size();
                inliningStack.removeElementAt(size-1);
                inlinedClassMethod.remove(klassMethod);
                specialVarsStack.removeElementAt(size-1);

                inlining = oldInlining;
                if(n.f1.which == 1) {
                    RetMessageSendStmt n3 = (RetMessageSendStmt)  n.f1.choice;
                    String id = (String) n3.f0.accept(this, argu);
                    ptm(id + " = " + ret + ";\n");
                    if(size >= 2) {
                        if(specialVarsStack.elementAt(size-2).contains(id)) {
                            String currentThis = inliningStack.elementAt(inliningStack.size()-1).get("this");
                            ptm(currentThis + ".funkyTaco" + n3.f0.f0.toString() + " = " + id + ";\n");
                        }
                    }
                }
                ptm("\n}\n");
            }
        }
        inlining = oldInlining;
        if(!goAhead)
            n.f1.accept(this, argu);

        return _ret;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "."
     * f2 -> Identifier()
     * f3 -> "("
     * f4 -> ( ArgList() )?
     * f5 -> ")"
     */
    public R visit(MessageSend n, A argu) {

        String s = (String) n.f0.accept(this, argu);
        s = s +  ".";
        s = s + "funkyTaco" + n.f2.f0.toString();
        s = s + "(";
        if(n.f4.present())
            s = s + (String) n.f4.accept(this, argu);
        s = s + ")";
        return (R) s;
    }

    /**
     * f0 -> Identifier()
     * f1 -> ( ArgRest() )*
     */
    public R visit(ArgList n, A argu) {
        R _ret = null;
        String s = (String) n.f0.accept(this, argu);
        Vector<Node> v = n.f1.nodes;
        int i = 0;
        while( i < v.size()) {
            s = s + v.elementAt(i).accept(this, argu);
            i++;
        }
        return (R) s;
    }

    /**
     * f0 -> ","
     * f1 -> Identifier()
     */
    public R visit(ArgRest n, A argu) {
        String s = ", ";
        s = s + (String) n.f1.accept(this, argu);
        return (R) s;
    }
    /**
     * f0 -> MessageSend()
     * f1 -> ";"
     */
    public R visit(VoidMessageSendStmt n, A argu) {
        R _ret = null;
        String s = (String) n.f0.accept(this, argu);
        s = s + ";\n";
        ptm(s);
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> " = "
     * f2 -> MessageSend()
     * f3 -> ";"
     */
    public R visit(RetMessageSendStmt n, A argu) {
        R _ret = null;
        String s = (String) n.f0.accept(this, argu);
        s = s + " = ";
        s = s + (String) n.f2.accept(this, argu);
        s = s + ";\n";
        ptm(s);
        return _ret;
    }

    /**
     * f0 -> <SCOMMENT1>
     * f1 -> <INLINE>
     * f2 -> <SCOMMENT2>
     */
    public R visit(InlineAnn n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> AndExpression()
     *         | CompareExpression()
     *         | PlusExpression()
     *         | MinusExpression()
     *         | TimesExpression()
     *         | ArrayLookup()
     *         | ArrayLength()
     *         | PrimaryExpression()
     */
    public R visit(Expression n, A argu) {
        return n.f0.accept(this, argu);
    }

    /**
     * f0 -> ConstOrId()
     * f1 -> "&"
     * f2 -> ConstOrId()
     */
    public R visit(AndExpression n, A argu) {
        R _ret = null;
        String s = (String) n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        s += "&";
        s += (String) n.f2.accept(this, argu);
        return (R) s;
    }

    /**
     * f0 -> ConstOrId()
     * f1 -> "<"
     * f2 -> ConstOrId()
     */
    public R visit(CompareExpression n, A argu) {
        R _ret = null;
        String s = (String) n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        s += "<";
        s += (String) n.f2.accept(this, argu);
        return (R) s;
    }

    /**
     * f0 -> ConstOrId()
     * f1 -> "+"
     * f2 -> ConstOrId()
     */
    public R visit(PlusExpression n, A argu) {
        R _ret = null;
        String s = (String) n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        s += "+";
        s += (String) n.f2.accept(this, argu);
        return (R) s;
    }

    /**
     * f0 -> ConstOrId()
     * f1 -> "-"
     * f2 -> ConstOrId()
     */
    public R visit(MinusExpression n, A argu) {
        R _ret = null;
        String s = (String) n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        s += "-";
        s += (String) n.f2.accept(this, argu);
        return (R) s;
    }

    /**
     * f0 -> ConstOrId()
     * f1 -> "*"
     * f2 -> ConstOrId()
     */
    public R visit(TimesExpression n, A argu) {
        R _ret = null;
        String s = (String) n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        s += "*";
        s += (String) n.f2.accept(this, argu);
        return (R) s;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "["
     * f2 -> ConstOrId()
     * f3 -> "]"
     */
    public R visit(ArrayLookup n, A argu) {
        R _ret = null;
        String s = (String) n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        s = s + "[" + (String) n.f2.accept(this, argu) + "]";
        return (R) s;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "."
     * f2 -> "length"
     */
    public R visit(ArrayLength n, A argu) {
        R _ret = null;
        String s = (String) n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        s = s + ".length";
        return (R) s;
    }





    /**
     * f0 -> IntegerLiteral()
     *         | TrueLiteral()
     *         | FalseLiteral()
     *         | Identifier()
     *         | ThisExpression()
     *         | ArrayAllocationExpression()
     *         | AllocationExpression()
     *         | NotExpression()
     */
    public R visit(PrimaryExpression n, A argu) {
        return n.f0.accept(this, argu);
    }

    /**
     * f0 -> <INTEGER_LITERAL>
     */
    public R visit(IntegerLiteral n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        return (R) n.f0.toString();
    }

    /**
     * f0 -> "true"
     */
    public R visit(TrueLiteral n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        String s = "true";
        return (R) s;
    }

    /**
     * f0 -> "false"
     */
    public R visit(FalseLiteral n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        String s = "false";
        return (R) s;
    }

    /**
     * f0 -> <IDENTIFIER>
     */
    public R visit(Identifier n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        String s  =  "funkyTaco" + n.f0.toString();
        if(inlining) {
            Hashtable<String, String> in = inliningStack.elementAt(inliningStack.size()-1);
            return (R) in.get(s);
        }
        return (R) s;
    }

    /**
     * f0 -> Identifier()
     *         | IntegerLiteral()
     *         | TrueLiteral()
     *         | FalseLiteral()
     */
    public R visit(ConstOrId n, A argu) {
        return n.f0.accept(this, argu);
    }

    /**
     * f0 -> "this"
     */
    public R visit(ThisExpression n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        String s = "this";
        if(inlining) {
            s = inliningStack.elementAt(inliningStack.size() - 1).get("this");
            return (R) s;
        }
        return (R) s;
    }

    /**
     * f0 -> "new"
     * f1 -> "int"
     * f2 -> "["
     * f3 -> Identifier()
     * f4 -> "]"
     */
    public R visit(ArrayAllocationExpression n, A argu) {
        R _ret = null;

        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        String s = (String) n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        s = "new int[" + s + "]";
        return (R) s;
    }

    /**
     * f0 -> "new"
     * f1 -> Identifier()
     * f2 -> "("
     * f3 -> ")"
     */
    public R visit(AllocationExpression n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        String s = "funkyTaco" + n.f1.f0.toString();
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        s = "new " + s + "()";
        return (R) s;
    }

    /**
     * f0 -> "!"
     * f1 -> Identifier()
     */
    public R visit(NotExpression n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        String s = (String) n.f1.accept(this, argu);
        s = "!" + s;
        return (R) s;
    }

}
