//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
    //
    // Auto class visitors--probably don't need to be overridden.
    //

    Hashtable<String, SymbolTable> global = new Hashtable<String, SymbolTable>();
    SymbolTable currentSymbolTable;
    String currentClass;
    Hashtable<String, String> currentHashIdentifiers;
    Hashtable<String, Signature> currentHashMethods;
    Vector<Argument> currentArguments;

    void println(String a) {
      System.out.println(a);
   }

    class Argument extends Object {
          String name;
          String type;
          Argument(String name, String type){
              this.name = name;
              this.type = type;
          }
          public void pretty(){
              println(name + " : " + type);
          }
     }

    class Signature extends Object{
        Vector<Argument> arguments;
        SymbolTable symbolTable;
        String returnType;
        public void appendArguments(){
            Enumeration vEnum = arguments.elements();
            while(vEnum.hasMoreElements()){
                Argument argument = (Argument) vEnum.nextElement();
                symbolTable.variableSymbolTable.put(argument.name, argument.type);
            }
        }
        public void pretty(){
            int i = 0;
            println("Method arguments :");
            Enumeration vEnum = arguments.elements();
            while(vEnum.hasMoreElements()){
                Argument argument = (Argument) vEnum.nextElement();
                println(argument.type + " " + argument.name);
            }
            println("Return Type :");
            println(returnType);
            println("");
            //symbolTable.pretty();
        }
    }

    class SymbolTable extends Object {
        Hashtable<String, String> variableSymbolTable;
        Hashtable<String, Signature> methodSymbolTable;
        String parent;
        SymbolTable(){
            parent = "main";
        }
        public String getVariable(String name, String key) {
            if(variableSymbolTable.containsKey(key))
                return  name + "_" + key + "_" + name.length();
            else if(!parent.equals("main"))
                return global.get(parent).getVariable(parent, key);
            return "";
        }

        public String getMethod(String name, String key) {
            if(methodSymbolTable.containsKey(key))
                return name + "_" + key + "_" + name.length();
            else if(!parent.equals("main"))
                return global.get(parent).getMethod(parent, key);
            return "";
        }

        public String getVariableType(String key) {
          if(variableSymbolTable.containsKey(key))
                return  variableSymbolTable.get(key);
            else if(!parent.equals("main"))
                return global.get(parent).getVariableType(key);
            return "";
        }

        public R getSignature(String key){
            if(methodSymbolTable.containsKey(key))
                return (R) methodSymbolTable.get(key);
            else if(!parent.equals("main"))
                return global.get(parent).getSignature(key);
            return null;
        }

        public void pretty(){
            Set entrySet = variableSymbolTable.entrySet();
            Iterator it = entrySet.iterator();
            println("variableSymbolTable :");
            while(it.hasNext()){
                System.out.println(it.next());
            }
            println("methodSymbolTable :");
            Enumeration e = methodSymbolTable.keys();
            while(e.hasMoreElements()){
                String key = (String) e.nextElement();
                println(key);
                println("");
                methodSymbolTable.get(key).pretty();
            }

            println("parent :");
            if(parent != null)
                println(parent);
            else
                println("none");
            println("");
        }
    }
    public R visit(NodeList n, A argu) {
        R _ret=null;
        int _count=0;
        for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
        }
        return _ret;
    }

    public R visit(NodeListOptional n, A argu) {
        if ( n.present() ) {
            R _ret=null;
            int _count=0;
            for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
                e.nextElement().accept(this,argu);
                _count++;
            }
            return _ret;
        }
        else
            return null;
    }

    public R visit(NodeOptional n, A argu) {
        if ( n.present() )
            return n.node.accept(this,argu);
        else
            return null;
    }

    public R visit(NodeSequence n, A argu) {
        R _ret=null;
        int _count=0;
        for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
        }
        return _ret;
    }

    public R visit(NodeToken n, A argu) { return null; }

    //
    // User-generated visitor methods below
    //

    /**
     * f0 -> MainClass()
     * f1 -> ( TypeDeclaration() )*
     * f2 -> <EOF>
     */
    public R visit(Goal n, A argu) {
        n.f1.accept(this, null);
        return (R) global;
    }


    public R visit(MainClass n, A argu) {
        return null;
    }

    /**
     * f0 -> ClassDeclaration()
     *         | ClassExtendsDeclaration()
     */
    public R visit(TypeDeclaration n, A argu) {
        n.f0.accept(this, null);
        return null;
    }

    /**
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "{"
     * f3 -> ( VarDeclaration() )*
     * f4 -> ( MethodDeclaration() )*
     * f5 -> "}"
     */
    public R visit(ClassDeclaration n, A argu) {
        currentClass = (String) n.f1.accept(this, argu);
        currentSymbolTable = new SymbolTable();
        currentHashIdentifiers = new Hashtable<String, String>();
        currentHashMethods = new Hashtable<String, Signature>();
        currentSymbolTable.variableSymbolTable = currentHashIdentifiers;
        currentSymbolTable.methodSymbolTable = currentHashMethods;
        currentSymbolTable.parent = (String) "main";
        n.f3.accept(this, null);
        n.f4.accept(this, null);
        global.put(currentClass, currentSymbolTable);
        //println(currentClass);
        //currentSymbolTable.pretty();
        return null;
    }

    /**
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "extends"
     * f3 -> Identifier()
     * f4 -> "{"
     * f5 -> ( VarDeclaration() )*
     * f6 -> ( MethodDeclaration() )*
     * f7 -> "}"
     */
    public R visit(ClassExtendsDeclaration n, A argu) {
        currentClass = (String) n.f1.accept(this, null);
        currentSymbolTable = new SymbolTable();
        String parent = (String) n.f3.accept(this, null);
        //if(!global.containsKey(parent))
        //     cryError("No Parent Found");
        currentHashIdentifiers = new Hashtable<String, String>();
        currentHashMethods = new Hashtable<String, Signature>();
        currentSymbolTable.variableSymbolTable = currentHashIdentifiers;
        currentSymbolTable.methodSymbolTable = currentHashMethods;
        currentSymbolTable.parent = parent;
        n.f5.accept(this, null);
        n.f6.accept(this, null);
        global.put(currentClass, currentSymbolTable);
        //println(currentClass);
        //currentSymbolTable.pretty();
        return null;
    }

    /**
     * f0 -> Type()
     * f1 -> Identifier()
     * f2 -> ";"
     */
    public R visit(VarDeclaration n, A argu) {
        String type = (String) n.f0.accept(this, null);
        String name = (String) n.f1.accept(this, null);
        n.f2.accept(this, null);
        currentHashIdentifiers.put(name, type);
        return null;
    }

    /**
     * f0 -> "public"
     * f1 -> Type()
     * f2 -> Identifier()
     * f3 -> "("
     * f4 -> ( FormalParameterList() )?
     * f5 -> ")"
     * f6 -> "{"
     * f7 -> ( VarDeclaration() )*
     * f8 -> ( Statement() )*
     * f9 -> "return"
     * f10 -> Expression()
     * f11 -> ";"
     * f12 -> "}"
     */
    public R visit(MethodDeclaration n, A argu) {
        SymbolTable currentMethodTable = new SymbolTable();
        String returnType = (String) n.f1.accept(this, null);
        String methodName = (String) n.f2.accept(this, null);
        currentArguments = new Vector<Argument>();
        n.f4.accept(this, null);
        Signature methodSign = new Signature();
        methodSign.arguments = currentArguments;
        methodSign.returnType = returnType;
        currentHashIdentifiers = new Hashtable<String, String>();
        n.f7.accept(this, null);

        currentMethodTable.variableSymbolTable = currentHashIdentifiers;
        currentMethodTable.methodSymbolTable = new Hashtable<String, Signature>();
        currentMethodTable.parent = currentClass;
        methodSign.symbolTable = currentMethodTable;
        methodSign.appendArguments();
        currentHashMethods.put(methodName, methodSign);
        return null;
    }

    /**
     * f0 -> FormalParameter()
     * f1 -> ( FormalParameterRest() )*
     */
    public R visit(FormalParameterList n, A argu) {
        n.f0.accept(this, null);
        n.f1.accept(this, null);
        return null;
    }

    /**
     * f0 -> Type()
     * f1 -> Identifier()
     */
    public R visit(FormalParameter n, A argu) {
        String type = (String) n.f0.accept(this, null);
        String name = (String) n.f1.accept(this, null);
        currentArguments.add(new Argument(name, type));
        return null;
    }

    /**
     * f0 -> ","
     * f1 -> FormalParameter()
     */
    public R visit(FormalParameterRest n, A argu) {
        n.f0.accept(this, null);
        n.f1.accept(this, null);
        return null;
    }

    /**
     * f0 -> ArrayType()
     *         | BooleanType()
     *         | IntegerType()
     *         | Identifier()
     */
    public R visit(Type n, A argu) {
        String type = (String) n.f0.accept(this, null);
        return (R) type;
    }

    /**
     * f0 -> "int"
     * f1 -> "["
     * f2 -> "]"
     */
    public R visit(ArrayType n, A argu) {
        n.f0.accept(this, null);
        n.f1.accept(this, null);
        n.f2.accept(this, null);
        String type = "int[]";
        return (R) type;
    }

    /**
     * f0 -> "boolean"
     */
    public R visit(BooleanType n, A argu) {
        n.f0.accept(this, null);
        String type = "boolean";
        return (R) type;
    }

    /**
     * f0 -> "int"
     */
    public R visit(IntegerType n, A argu) {
        n.f0.accept(this, null);
        String type = "int";
        return (R) type;
    }

    /**
     * f0 -> Block()
     *         | AssignmentStatement()
     *         | ArrayAssignmentStatement()
     *         | FieldAssignmentStatement()
     *         | IfStatement()
     *         | WhileStatement()
     *         | ForStatement()
     *         | PrintStatement()
     */
    public R visit(Statement n, A argu)  {
        return null;
    }

    /**
     * f0 -> "{"
     * f1 -> ( Statement() )*
     * f2 -> "}"
     */
    public R visit(Block n, A argu)  {
        return null;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "="
     * f2 -> Expression()
     * f3 -> ";"
     */
    public R visit(AssignmentStatement n, A argu)  {
        return null;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "["
     * f2 -> Expression()
     * f3 -> "]"
     * f4 -> "="
     * f5 -> Expression()
     * f6 -> ";"
     */
    public R visit(ArrayAssignmentStatement n, A argu)  {
        return null;
    }

    /**
     * f0 -> Expression()
     * f1 -> "."
     * f2 -> Identifier()
     * f3 -> "="
     * f4 -> Expression()
     * f5 -> ";"
     */
    public R visit(FieldAssignmentStatement n, A argu)  {
        return null;
    }

    /**
     * f0 -> "if"
     * f1 -> "("
     * f2 -> Expression()
     * f3 -> ")"
     * f4 -> Statement()
     * f5 -> "else"
     * f6 -> Statement()
     */
    public R visit(IfStatement n, A argu)  {
        return null;
    }

    /**
     * f0 -> "while"
     * f1 -> "("
     * f2 -> Expression()
     * f3 -> ")"
     * f4 -> Statement()
     */
    public R visit(WhileStatement n, A argu)  {
        return null;
    }

    /**
     * f0 -> "for"
     * f1 -> "("
     * f2 -> Identifier()
     * f3 -> "="
     * f4 -> Expression()
     * f5 -> ";"
     * f6 -> Expression()
     * f7 -> ";"
     * f8 -> Identifier()
     * f9 -> "="
     * f10 -> Expression()
     * f11 -> ")"
     * f12 -> Statement()
     */
    public R visit(ForStatement n, A argu)  {
        return null;
    }

    /**
     * f0 -> "System.out.println"
     * f1 -> "("
     * f2 -> Expression()
     * f3 -> ")"
     * f4 -> ";"
     */
    public R visit(PrintStatement n, A argu)  {
        return null;
    }

    /**
     * f0 -> AndExpression()
     *         | CompareExpression()
     *         | PlusExpression()
     *         | MinusExpression()
     *         | TimesExpression()
     *         | ArrayLookup()
     *         | ArrayLength()
     *         | MessageSend()
     *         | PrimaryExpression()
     */
    public R visit(Expression n, A argu)  {
        return null;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "&"
     * f2 -> PrimaryExpression()
     */
    public R visit(AndExpression n, A argu)  {
        return null;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "<"
     * f2 -> PrimaryExpression()
     */
    public R visit(CompareExpression n, A argu)  {
        return null;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "+"
     * f2 -> PrimaryExpression()
     */
    public R visit(PlusExpression n, A argu)  {
        return null;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "-"
     * f2 -> PrimaryExpression()
     */
    public R visit(MinusExpression n, A argu)  {
        return null;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "*"
     * f2 -> PrimaryExpression()
     */
    public R visit(TimesExpression n, A argu)  {
        return null;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "["
     * f2 -> PrimaryExpression()
     * f3 -> "]"
     */
    public R visit(ArrayLookup n, A argu)  {
        return null;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "."
     * f2 -> "length"
     */
    public R visit(ArrayLength n, A argu)  {
        return null;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "."
     * f2 -> Identifier()
     * f3 -> "("
     * f4 -> ( ExpressionList() )?
     * f5 -> ")"
     */
    public R visit(MessageSend n, A argu)  {
        return null;
    }

    /**
     * f0 -> Expression()
     * f1 -> ( ExpressionRest() )*
     */
    public R visit(ExpressionList n, A argu)  {
        return null;
    }

    /**
     * f0 -> ","
     * f1 -> Expression()
     */
    public R visit(ExpressionRest n, A argu)  {
        return null;
    }

    /**
     * f0 -> IntegerLiteral()
     *         | TrueLiteral()
     *         | FalseLiteral()
     *         | Identifier()
     *         | ThisExpression()
     *         | ArrayAllocationExpression()
     *         | AllocationExpression()
     *         | NotExpression()
     *         | BracketExpression()
     */
    public R visit(PrimaryExpression n, A argu)  {
        return null;
    }

    /**
     * f0 -> <INTEGER_LITERAL>
     */
    public R visit(IntegerLiteral n, A argu)  {
        return null;
    }

    /**
     * f0 -> "true"
     */
    public R visit(TrueLiteral n, A argu)  {
        return null;
    }

    /**
     * f0 -> "false"
     */
    public R visit(FalseLiteral n, A argu)  {
        return null;
    }

    /**
     * f0 -> <IDENTIFIER>
     */
    public R visit(Identifier n, A argu)  {
        String tacoId = "Taco" + n.f0.toString();
        return (R) tacoId;
    }

    /**
     * f0 -> "this"
     */
    public R visit(ThisExpression n, A argu)  {
        return null;
    }

    /**
     * f0 -> "new"
     * f1 -> "int"
     * f2 -> "["
     * f3 -> Expression()
     * f4 -> "]"
     */
    public R visit(ArrayAllocationExpression n, A argu)  {
        return null;
    }

    /**
     * f0 -> "new"
     * f1 -> Identifier()
     * f2 -> "("
     * f3 -> ")"
     */
    public R visit(AllocationExpression n, A argu)  {
        return null;
    }

    /**
     * f0 -> "!"
     * f1 -> Expression()
     */
    public R visit(NotExpression n, A argu)  {
        return null;
    }

    /**
     * f0 -> "("
     * f1 -> Expression()
     * f2 -> ")"
     */
    public R visit(BracketExpression n, A argu)  {
        return null;
    }

}
