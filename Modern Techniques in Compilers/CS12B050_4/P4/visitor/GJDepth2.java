//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepth2<R,A> extends GJDepthFirst<R, A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
    boolean inLic;
    String methodString = "";
    String variableString = "";
    String overall = "";
    int temps = 0;
    Set<String> globalValidStrings;
    boolean inMethod;
    Set<String> genJunkUse;
    Hashtable<String, String> typer;

    class Enum {
        public boolean lic;
        public boolean nlic;
        public Enum() {
            lic = false;
            nlic = false;
        }
    }

    class PassOn {

        public boolean toPrint;
        public boolean firstPass;
        public boolean lastPass;
        public Vector<Statement> lic;
        public Set<String> liv;
        public Set<String> nliv;
        public Set<String> useVariables;
        public Set<String> defVariables;
        public Set<Expression> lie1;
        public Vector<Expression> lie;
        public Hashtable<Expression, String> lie2;
        public Set<Statement> nlic;
        public boolean checkInvariant;
        public boolean retString;
        public Set<String> validStrings;
        public String definiteNlic;

        public PassOn() {
            toPrint = true;
            firstPass = true;
            lic = new Vector<Statement>();
            nlic = new HashSet<Statement>();
            nliv = new HashSet<String>();
            liv = new HashSet<String>();
            lie1 = new HashSet<Expression>();
            lie = new Vector<Expression>();
            lie2 = new Hashtable<Expression, String>();
            useVariables = new HashSet<String>();
            defVariables = new HashSet<String>();
            validStrings = globalValidStrings;
            checkInvariant = true;
            retString = true;
            lastPass = false;
            nliv.add("f");
        }
        public void addToUse(String s) {
            useVariables.add(s);
        }
        public void addToDef(String s) {
            defVariables.add(s);
        }

        public String getTemp(Expression e) {
            return lie2.get(e);
        }

        public void putTemp(Expression e, String s) {
            lie2.put(e, s);
        }

        public void addAllUse(Set<String> s) {
            useVariables.addAll(s);
        }
        public boolean inUse(String s) {
            return useVariables.contains(s);
        }
        public boolean inDef(String s) {
            return defVariables.contains(s);
        }
        public boolean inScope(String s) {
            return inUse(s) || inDef(s);
        }

        public void markNliv(String s) {
            nliv.add(s);
        }

        public void markNlic(Statement s) {
            nlic.add(s);
        }

        public int nlicSize() {
            return nlic.size();
        }

        public void markLiv(String s) {
            liv.add(s);
        }

        public void markLic(Statement s) {
            lic.add(s);
        }

        public boolean isNliv(String s) {
            return nliv.contains(s) || !validStrings.contains(s);
        }

        public boolean isNlic(Statement s) {
            return nlic.contains(s);
        }

        public void markLie(Expression e) {
            if(!lie1.contains(e)) {
                lie1.add(e);
                lie.add(e);
            }
        }


        public boolean isLie(Expression e) {
            return lie1.contains(e);
        }
    }

    public boolean equals(PassOn p1, PassOn p2) {
        Set<String> nliv1 = p1.nliv;
        Set<String> nliv2 = p2.nliv;
        Set<Statement> nlic1 = p1.nlic;
        Set<Statement> nlic2 = p2.nlic;
        boolean b = p1.lie.size() == p2.lie.size();
        return (nliv1.size() == nliv2.size()) && (nlic1.size() == nlic2.size()) && b;
    }
    // p1 = p2

    public void deepCopy(Set a, Set b) {
        Iterator it = b.iterator();
        while(it.hasNext()) {
            a.add(it.next());
        }
    }

    // public void deepCopy(Set<String> a, Set<String> b) {
    //     Iterator it = b.iterator();
    //     while(it.hasNext()) {
    //         a.add(it.next());
    //     }
    // }

    // public void deepCopy(Set<Expression> a, Set<Expression> b) {
    //     Iterator it = b.iterator();
    //     while(it.hasNext()) {
    //         a.add(it.next());
    //     }
    // }

    public void deepCopy(Vector a, Vector b) {
        int i = 0;
        while(i < b.size()) {
            a.add(b.elementAt(i));
            i++;
        }
    }

    // public void deepCopy(Vector<Expression> a, Vector<Expression> b) {
    //     int i = 0;
    //     while(i < b.size()) {
    //         a.add(b.elementAt(i));
    //         i++;
    //     }
    // }

    public void deepCopy(Hashtable<Expression, String> a, Hashtable<Expression, String> b) {
        Enumeration<Expression> it = b.keys();
        while(it.hasMoreElements()) {
            Expression e = it.nextElement();
            a.put(e, b.get(e));
        }
    }

    public void deepCopy(PassOn p1, PassOn p2) {
        p1.toPrint = p2.toPrint;
        p1.firstPass = p2.firstPass;

        deepCopy(p1.lic, p2.lic);
        deepCopy(p1.nlic, p2.nlic);
        deepCopy(p1.nliv, p2.nliv);
        deepCopy(p1.lie1, p2.lie1);
        deepCopy(p1.lie, p2.lie);
        deepCopy(p1.lie2, p2.lie2);

        deepCopy(p1.useVariables, p2.useVariables);
        deepCopy(p1.defVariables, p2.defVariables);
        p1.validStrings = p2.validStrings;

        p1.checkInvariant = p2.checkInvariant;
        p1.retString = p2.retString;
        p1.lastPass = p2.lastPass;
    }

    public void union(PassOn passOn, PassOn passOn1, PassOn passOn2) {
        passOn.nlic.addAll(passOn1.nlic);
        passOn.nlic.addAll(passOn2.nlic);
        passOn.nliv.addAll(passOn1.nliv);
        passOn.nliv.addAll(passOn2.nliv);
        passOn.useVariables.addAll(passOn1.useVariables);
        passOn.useVariables.addAll(passOn2.useVariables);
        passOn.defVariables.addAll(passOn1.defVariables);
        passOn.defVariables.addAll(passOn2.defVariables);
    }
    public void print(String a) {
        methodString += a;
    }

    public void print(Integer b) {
        methodString += b.toString();
    }

    public String makeVar(String type) {
        String temp = "t" + String.valueOf(temps);
        variableString += type + " " + temp + ";\n";
        temps++;
        return temp;
    }
    public void pto(String a) {
        overall += a;
    }

    class LoopAnnotate {
        int which;
        int unrollFactor;
        int tile_1;
        int tile_2;
        String myString;
        LoopAnnotate(int which, int unrollFactor, int tile_1, int tile_2, String myString) {
            this.which = which;
            this.unrollFactor = unrollFactor;
            this.tile_1 = tile_1;
            this.tile_2 = tile_2;
            this.myString = myString;
        }
    }

    public R visit(NodeList n, A argu) {
        R _ret=null;
        int _count=0;
        for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
           e.nextElement().accept(this,argu);
           _count++;
         }
        return _ret;
    }

    public R visit(NodeListOptional n, A argu) {
        if ( n.present() ) {
           R _ret=null;
           int _count=0;
           for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
                e.nextElement().accept(this,argu);
                _count++;
            }
           return _ret;
         }
        else
           return null;
    }

    public R visit(NodeOptional n, A argu) {
        if ( n.present() )
           return n.node.accept(this,argu);
        else
           return (R)"";
    }

    public R visit(NodeSequence n, A argu) {
        R _ret=null;
        int _count=0;
        for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
           e.nextElement().accept(this,argu);
           _count++;
         }
        return _ret;
    }

    public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
    public R visit(Goal n, A argu) {
        R _ret=null;
        genJunkUse = new HashSet<String>();
        genJunkUse.add("f");
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return (R) overall;
    }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> ( VarDeclaration() )*
    * f15 -> ( Statement() )*
    * f16 -> "}"
    * f17 -> "}"
    */
    public R visit(MainClass n, A argu) {
         R _ret = null;
        String id = (String) n.f1.accept(this, argu);
        inLic = false;
        pto("class " + id + "\n{\n");
        pto("public static void main( String[] ");
        id = (String) n.f11.accept(this, argu);
        inMethod = true;
        pto(id + ")\n{\n");
        NodeListOptional n1 = n.f14;
        globalValidStrings = new HashSet<String>();// Changed
        for(int i = 0; i < n1.size(); i++) {
            VarDeclaration v = (VarDeclaration) n1.elementAt(i);
            String type = (String) v.f0.accept(this, argu);
            String var = v.f1.f0.toString();
            pto(type + " " + var + ";\n");
            if(inMethod && (type.equals("int") || type.equals("boolean"))) {
                globalValidStrings.add(var);
            }
        }
        n1 = n.f15;
        PassOn passOn = new PassOn();
        for(int i = 0; i < n1.size(); i++)
            n1.elementAt(i).accept(this, (A) passOn);
        pto(variableString);
        pto(methodString);
        pto("}\n");
        pto("}\n");
        return _ret;
    }

   /**
    * f0 -> ClassDeclaration()
    *         | ClassExtendsDeclaration()
    */
    public R visit(TypeDeclaration n, A argu) {
        R _ret=null;
        n.f0.accept(this, argu);
        return _ret;
    }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
    public R visit(ClassDeclaration n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        inLic = false;
        String className = (String) n.f1.f0.toString();
        pto("class " + className + "\n{");
        inMethod = false;
        NodeListOptional n1 = n.f3;
        variableString = "";
        methodString = "";
        for(int i = 0; i < n1.size(); i++) {
            VarDeclaration v = (VarDeclaration) n1.elementAt(i);
            String type = (String) v.f0.accept(this, argu);
            String id = v.f1.f0.toString();
            pto(type + " " + id + ";");
        }
        n1 = n.f4;
        for(int i = 0; i < n1.size(); i++) {
            n1.elementAt(i).accept(this, argu);
        }

        pto("}\n");
        return _ret;
     }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
    public R visit(ClassExtendsDeclaration n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        inLic = false;
        String className = (String) n.f1.accept(this, argu);
        pto("class " + className);
        String extending = (String) n.f3.accept(this, argu);
        pto(" extends " + extending + "\n{");
        NodeListOptional n1 = n.f5;
        for(int i = 0; i < n1.size(); i++) {
            VarDeclaration v = (VarDeclaration) n1.elementAt(i);
            String type = (String) v.f0.accept(this, argu);
            String id = v.f1.f0.toString();
            pto(type + " " + id + ";");
        }
        n1 = n.f6;
        for(int i = 0; i < n1.size(); i++) {
            n1.elementAt(i).accept(this, argu);
        }
        pto("}\n");
        return _ret;
     }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
    public R visit(VarDeclaration n, A argu) {
        R _ret=null;
        String type = (String) n.f0.accept(this, argu);
        String id = (String) n.f1.accept(this, argu);
        variableString += type + " " + id + ";\n";
        if(inMethod && (type.equals("int") || type.equals("boolean"))) {
            globalValidStrings.add(id);
        }
        return _ret;
    }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Identifier()
    * f11 -> ";"
    * f12 -> "}"
    */
    public R visit(MethodDeclaration n, A argu) {
        R _ret=null;
        n.f0.accept(this, argu);
        inMethod = true;
        globalValidStrings = new HashSet<String>();
        typer = new Hashtable<String, String>();
        String type = (String) n.f1.accept(this, argu);
        String id = (String) n.f2.accept(this, argu);
        String fpl = (String) n.f4.accept(this, argu);
        pto("public " + type +  " " + id + "(" + fpl + ")" + "{\n");
        variableString = "";
        methodString = "";
        n.f7.accept(this, argu);
        PassOn passOn = new PassOn();
        n.f8.accept(this, (A) passOn);
        pto(variableString);
        pto(methodString);
        String id2 = (String) n.f10.accept(this, argu);
        pto("return " + id2 + ";\n}\n\n");
        inMethod = false;
        return _ret;
    }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
    public R visit(FormalParameterList n, A argu) {
        R _ret=null;
        int i;
        String arg1 = (String) n.f0.accept(this, argu);
        if(n.f1.present()) {
          Vector<Node> n1 = n.f1.nodes;
          for(i = 0; i < n1.size(); i++) {
              arg1 += (String) n1.elementAt(i).accept(this, argu);
          }
        }
        return (R) arg1;
    }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
    public R visit(FormalParameter n, A argu) {
        String type = (String) n.f0.accept(this, argu);
        String id = (String) n.f1.accept(this, argu);
        type = type + " " + id;
        globalValidStrings.add(id);
        return (R) type;
    }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
    public R visit(FormalParameterRest n, A argu) {
        String id = (String) n.f1.accept(this, argu);
        id = ", " + id;
        return (R) id;
    }

   /**
    * f0 -> ArrayType()
    *         | BooleanType()
    *         | IntegerType()
    *         | Identifier()
    */
    public R visit(Type n, A argu) {
        return n.f0.accept(this, argu);
    }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
    public R visit(ArrayType n, A argu) {
        R _ret=null;
        String id = "int[]";
        return (R) id;
    }

   /**
    * f0 -> "boolean"
    */
    public R visit(BooleanType n, A argu) {
        R _ret=null;
        String id = "boolean";
        return (R) id;
    }

   /**
    * f0 -> "int"
    */
    public R visit(IntegerType n, A argu) {
        R _ret=null;
        String id = "int";
        return (R) id;
    }

   /**
    * f0 -> Block()
    *         | AssignmentStatement()
    *         | ArrayAssignmentStatement()
    *         | FieldAssignmentStatement()
    *         | IfStatement()
    *         | WhileStatement()
    *         | ForStatement()
    *         | PrintStatement()
    */
    public R visit(Statement n, A argu) {
        R _ret=null;
        Enum val = (Enum) n.f0.accept(this, argu);
        PassOn passOn = (PassOn) argu;
        if(val.nlic)
            passOn.markNlic(n);
        if(val.lic)
            passOn.markLic(n);

        return (R) val;
    }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
    public R visit(Block n, A argu) {
        R _ret=null;
        PassOn passOn = (PassOn) argu;
        Enum c;
        Enum e = new Enum();
        boolean checkInvariant = passOn.checkInvariant;

        if(passOn.toPrint) {
            print("{\n");
            n.f1.accept(this, argu);
            print("}\n");
        }

        else {
            Vector<Node> n1 = n.f1.nodes;
            int i;
            for(i = 0; i < n1.size(); i++) {
                c = (Enum) n1.elementAt(i).accept(this, argu);
                if(c.nlic)
                    e.nlic = true;

            }
            if(passOn.lastPass) {
                if(!e.nlic)
                    e.lic = true;
                for(i = 0; i < n1.size(); i++)
                    passOn.lic.remove((Statement) n1.elementAt(i));
            }
        }
        return (R) e;
    }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
    public R visit(AssignmentStatement n, A argu) {
        R _ret = null;
        PassOn passOn = (PassOn) argu;
        boolean b = passOn.toPrint;
        Enum e = new Enum();
        String id = (String) n.f0.accept(this, argu);
        if(b) {
            passOn.retString = true;
            String exp;

            if(passOn.lie1.contains(n.f2) && !inLic)
                exp = passOn.lie2.get(n.f2);
            else
                exp = (String) n.f2.accept(this, argu);
            if(inLic) {
                passOn.lie1.remove(n.f2);
                passOn.lie.remove(n.f2);
            }
            print(id + " = " + exp + ";\n");
        }
        else {

            Set<String> useSet = (Set<String>) n.f2.accept(this, argu);
            Iterator it = useSet.iterator();
            boolean b1 = true;
            boolean checkInvariant = passOn.checkInvariant;
            while(it.hasNext()) {
                String s = (String) it.next();
                if(passOn.isNliv(s)) {
                    b1 = false;
                    break;
                }
            }
            if(!b1) {
                passOn.markNliv(id);
                e.nlic = true;
            }
            passOn.addAllUse(useSet);

            if(passOn.isNliv(id))
                e.nlic = true;

            if(passOn.firstPass && passOn.inScope(id)) {
                passOn.markNliv(id);
                e.nlic = true;
            }

            if(passOn.lastPass) {
                if(!passOn.isNliv(id)) {
                    passOn.liv.add(id);
                    passOn.markLie(n.f2);
                    if(checkInvariant)
                        e.lic = true;
                }
                if(b1)
                    passOn.markLie(n.f2);
            }
            if(!checkInvariant) {
                e.nlic = true;
                passOn.markNliv(id);
            }
            if(passOn.firstPass)
                passOn.addToDef(id);
        }
        return (R) e;
    }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Identifier()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> ConstOrId()
    * f6 -> ";"
    */
    public R visit(ArrayAssignmentStatement n, A argu) {
        R _ret=null;
        PassOn  passOn = (PassOn) argu;
        String id1 = (String) n.f0.accept(this, argu);
        String id2 = (String) n.f2.accept(this, argu);
        String id3 = (String) n.f5.accept(this, argu);
        if(passOn.toPrint)
            print(id1 + "[" + id2 + "]" + " = " + id3 + ";\n");

        else {
            passOn.addToUse(id1);
            passOn.addToUse(id2);
            if(n.f5.f0.which == 0)
                passOn.addToUse(id3);
            passOn.markNliv(id1);
        }
        Enum e = new Enum();
        e.nlic = true;
        return (R) e;
    }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "="
    * f4 -> Identifier()
    * f5 -> ";"
    */
    public R visit(FieldAssignmentStatement n, A argu) {
        R _ret=null;
        String id1 = (String) n.f0.accept(this, argu);
        String id2 = (String) n.f2.accept(this, argu);
        String id3 = (String) n.f4.accept(this, argu);
        PassOn  passOn = (PassOn) argu;
        if(passOn.toPrint)
            print(id1 + "." + id2 + " = " + id3 + ";\n");
        else {
            passOn.addToUse(id1);
            passOn.addToUse(id3);
            passOn.markNliv(id1);
        }
        Enum e = new Enum();
        e.nlic = true;
        return (R) e;
    }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
    public R visit(IfStatement n, A argu) {
        R _ret=null;
        PassOn passOn = (PassOn) argu;
        String id = (String) n.f2.accept(this, argu);
        boolean p = false;
        Enum e = new Enum();
        if(passOn.toPrint) {
            print("if(");
            print(id + ")\n");
            n.f4.accept(this, argu);
            print("else\n");
            n.f6.accept(this, argu);
        }
        else {
            passOn.addToUse(id);
            boolean isNliv = passOn.isNliv(id);
            boolean checkInvariant = passOn.checkInvariant;
            if(isNliv) {
                e.nlic = true;
                passOn.checkInvariant = false;
            }


            if(passOn.lastPass) {

                n.f4.accept(this, argu);
                n.f6.accept(this, argu);
                if(!passOn.isNlic(n.f4) && !isNliv && !passOn.isNlic(n.f6))
                    if(checkInvariant) {
                        e.lic = true;
                        passOn.lic.remove(n.f4);
                        passOn.lic.remove(n.f6);
                    }
                passOn.checkInvariant = checkInvariant;
            }
            else {
                PassOn passOn1 = new PassOn();
                PassOn passOn2 = new PassOn();
                deepCopy(passOn1, passOn);
                deepCopy(passOn2, passOn);
                n.f4.accept(this, (A) passOn1);
                n.f6.accept(this, (A) passOn2);
                union(passOn, passOn1, passOn2);
                if(passOn.isNlic(n.f4) || passOn.isNlic(n.f6))
                    e.nlic = true;
                if(!checkInvariant)
                    e.nlic = true;
                passOn.checkInvariant = checkInvariant;

            }

        }
        return (R) e;
    }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    */
    public R visit(WhileStatement n, A argu) {
        R _ret = null;
        String id = (String) n.f2.accept(this, argu);
        boolean p = false;
        PassOn passOn = (PassOn) argu;
        boolean checkInvariant = passOn.checkInvariant;
        Enum e = new Enum();
        if(passOn.toPrint) {
            print("while(");
            print(id + ")\n");
            n.f4.accept(this, argu);
        }
        else {
            if(passOn.isNliv(id)) {
                e.nlic = true;
                passOn.checkInvariant = false;
            }
            passOn.addToUse(id);
            if(passOn.lastPass) {
                boolean isNliv = passOn.isNliv(id);
                if(isNliv)
                    passOn.checkInvariant = false;
                n.f4.accept(this, argu);
                if(!passOn.isNlic(n.f4) && !isNliv) {
                    if(checkInvariant) {
                        e.lic = true;
                        passOn.lic.remove(n.f4);
                    }
                    else
                        e.nlic = true;
                }
                else {

                    e.nlic = true;
                }
                passOn.checkInvariant = checkInvariant;
            }
            else {
                n.f4.accept(this, argu);
                if(passOn.isNlic(n.f4) || !checkInvariant)
                    e.nlic = true;

                passOn.checkInvariant = checkInvariant;
            }

        }
        return (R) e;
    }

   /**
    * f0 -> ( LoopAnnotation() )?
    * f1 -> "for"
    * f2 -> "("
    * f3 -> Identifier()
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    * f7 -> Expression()
    * f8 -> ";"
    * f9 -> Identifier()
    * f10 -> "="
    * f11 -> Expression()
    * f12 -> ")"
    * f13 -> Statement()
    */
    public R visit(ForStatement n, A argu) {
        R _ret=null;
        LoopAnnotate la;
        boolean done = false;
        PassOn passOn1 = (PassOn) argu;
        boolean processed = false;
        Enum e1 = new Enum();
        if(n.f0.present()) {
            la = (LoopAnnotate) n.f0.accept(this, argu);
            if(la.which == 1) {
                PassOn passOn = new PassOn();
                passOn.toPrint = false;
                passOn.retString = false;
                passOn.firstPass = true;
                String loopIndex = (String) n.f3.accept(this, argu);
                passOn.markNliv(loopIndex);
                CompareExpression c1 = (CompareExpression) n.f7.f0.choice;
                Vector<Node> nodes = null;
                String limit = (String) c1.f2.accept(this, argu);
                if(c1.f2.f0.which == 0)
                    passOn.addToUse(limit);
                Statement s = n.f13;
                Block b = null;
                boolean isBlock = s.f0.which == 0;
                if(isBlock)
                    b = (Block) n.f13.f0.choice;;
                passOn.retString = false;
                if(isBlock)
                    nodes = b.f1.nodes;
                int i = 0;
                if(isBlock)
                    while(i < nodes.size()) {
                        nodes.elementAt(i).accept(this, (A) passOn);
                        i++;
                    }
                else
                    n.f13.accept(this, (A) passOn);
                passOn.firstPass = false;
                PassOn passOn2;
                while(true) {
                    passOn2 = new PassOn();
                    deepCopy(passOn2, passOn);
                    i = 0;
                    if(isBlock)
                        while(i < nodes.size()) {
                            nodes.elementAt(i).accept(this, (A) passOn);
                            i++;
                        }
                    else
                        n.f13.accept(this, (A) passOn);
                    if(equals(passOn, passOn2))
                        break;
                }
                passOn.lastPass = true;
                i = 0;
                if(isBlock)
                    while(i < nodes.size()) {
                        nodes.elementAt(i).accept(this, (A) passOn);
                        i = i+1;
                    }
                else
                    n.f13.accept(this, (A) passOn);
                passOn.lastPass = false;
                if(passOn1.toPrint) {
                    passOn.toPrint = true;
                    String t1 = makeVar("boolean");
                    print(loopIndex + " = 0;\n");
                    print(t1 + " = " + loopIndex + " < " + limit + ";\n");
                    print("if(" + t1 + ") {\n");
                    i = 0;
                    passOn.retString = true;
                    inLic = true;
                    while(i < passOn.lic.size()) {
                        if(!passOn.nlic.contains(passOn.lic.elementAt(i)))
                            passOn.lic.elementAt(i).accept(this, (A) passOn);
                        i++;
                    }
                    inLic = false;
                    i = 0;
                    while(i < passOn.lie.size()) {

                        Expression e = passOn.lie.elementAt(i);
                        if(e.f0.which == 8) {
                            PrimaryExpression pe = (PrimaryExpression) e.f0.choice;
                            if(pe.f0.which != 7) {
                                passOn.lie.remove(e);
                                passOn.lie1.remove(e);
                            }
                            else {
                                String t = makeVar("boolean");
                                String exp = (String) e.accept(this, (A) passOn);
                                print(t + " = " + exp + ";\n");
                                passOn.putTemp(e, t);
                                i = i+1;
                            }
                        }
                        else {
                            String t;
                            if(e.f0.which == 0 || e.f0.which == 1)
                                t = makeVar("boolean");
                            else
                                t = makeVar("int");
                            String exp = (String) e.accept(this, (A) passOn);
                            print(t + " = " + exp + ";\n");
                            passOn.putTemp(e, t);
                            i = i+1;
                        }
                    }
                    String exp = (String) n.f5.accept(this, (A) passOn);
                    print("for(" + loopIndex + " = " + exp + ";");
                    exp = (String) n.f7.accept(this, argu);
                    print(exp + ";");
                    print(loopIndex + " = " + loopIndex + " + 1) {\n");
                    i = 0;
                    if(isBlock)
                        while(i < nodes.size()) {
                            if(passOn.isNlic((Statement) nodes.elementAt(i)))
                                nodes.elementAt(i).accept(this, (A) passOn);
                            i++;
                        }
                    else if(passOn.isNlic(n.f13))
                        n.f13.accept(this, (A) passOn);
                    print("}\n");
                    print("}\n");
                    print("else{}\n");
                    done = true;
                }
                processed = true;
                Enum er = new Enum();
                er.nlic = true;
                return (R) er;
            }
        }

        if(passOn1.toPrint ) {
            if(n.f0.present()) {
                la = (LoopAnnotate) n.f0.accept(this, argu);
                print(la.myString);
            }

            print("for(");
            String id = (String) n.f3.accept(this, argu);
            print(id + "=");
            String exp1 = (String) n.f5.accept(this, argu);

            print(exp1 + ";");
            String exp2 = (String) n.f7.accept(this, argu);
            print(exp2 + ";");
            String id1 = (String) n.f9.accept(this, argu);
            print(id1 + " = ");
            String exp3 = (String) n.f11.accept(this, argu);
            print(exp3 + ")\n");
            n.f13.accept(this, argu);
            done = true;
        }
        Enum e = new Enum();
        if(!passOn1.toPrint && !processed) {
            String id = (String) n.f3.accept(this, argu);
            boolean checkInvariant = passOn1.checkInvariant;
            if(passOn1.firstPass)
                if(passOn1.isNliv(id))
                    e.nlic = true;
            passOn1.markNliv(id);
            passOn1.addToUse(id);
            passOn1.addToDef(id);
            CompareExpression e5 = (CompareExpression) n.f7.f0.choice;

            if(e5.f2.f0.which == 0) {
                String s = (String) e5.f2.f0.accept(this, argu);
                passOn1.addToUse(s);
                if(passOn1.isNliv(s)) {
                    e.nlic = true;
                    passOn1.checkInvariant = false;
                }
            }
            if(!checkInvariant) {
                e.nlic = true;
                passOn1.checkInvariant = false;
            }
            if(passOn1.lastPass) {
                n.f13.accept(this, argu);
                if(!passOn1.isNlic(n.f13)) {
                    if(checkInvariant) {
                        e.lic = true;
                        passOn1.lic.remove(n.f13);
                    }
                    else
                        e.nlic = true;
                }
                else
                    e.nlic = true;

                passOn1.checkInvariant = checkInvariant;
            }
            else {
                if(passOn1.isNlic(n.f13) || !checkInvariant) {
                    e.nlic = true;
                    passOn1.checkInvariant = false;
                }
                n.f13.accept(this, argu);
                passOn1.checkInvariant = checkInvariant;
            }
        }
        return (R) e;
    }

   /**
    * f0 -> LoopTileAnn()
    *         | LoopInvariantCodeMotionAnn()
    *         | LoopUnrollAnn()
    *         | LoopDistributionAnn()
    */
    public R visit(LoopAnnotation n, A argu) {
        return n.f0.accept(this, argu);
    }

   /**
    * f0 -> <SCOMMENT1>
    * f1 -> <LOOPTILE>
    * f2 -> IntegerLiteral()
    * f3 -> IntegerLiteral()
    * f4 -> <SCOMMENT2>
    */
    public R visit(LoopTileAnn n, A argu) {
        R _ret=null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        Integer tile_1 = (Integer) n.f2.accept(this, argu);
        Integer tile_2 = (Integer) n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        String myString = "/*LOOPTILE " + tile_1.toString() + " " + tile_2.toString() + " */\n";
        return (R) new LoopAnnotate(0, 0, tile_1.intValue(), tile_2.intValue(), myString);
    }

   /**
    * f0 -> <SCOMMENT1>
    * f1 -> <LICM>
    * f2 -> <SCOMMENT2>
    */
    public R visit(LoopInvariantCodeMotionAnn n, A argu) {
        return (R) new LoopAnnotate(1, 0, 0, 0, "");
    }

   /**
    * f0 -> <SCOMMENT1>
    * f1 -> <LOOPUNROLL>
    * f2 -> IntegerLiteral()
    * f3 -> <SCOMMENT2>
    */
    public R visit(LoopUnrollAnn n, A argu) {
        Integer unrollFactor = (Integer) n.f2.accept(this, argu);
        return (R) new LoopAnnotate(2, unrollFactor.intValue(), 0, 0, "");
    }

   /**
    * f0 -> <SCOMMENT1>
    * f1 -> <LOOPDISTRIBUTE>
    * f2 -> <SCOMMENT2>
    */
    public R visit(LoopDistributionAnn n, A argu) {
        String myString = "/*LOOPDISTRIBUTE*/\n";
        return (R) new LoopAnnotate(3, 0, 0, 0, myString);
    }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> ";"
    */
    public R visit(PrintStatement n, A argu) {
        R _ret = null;
        String id = (String) n.f2.accept(this, argu);
        Enum e = new Enum();
        PassOn passOn = (PassOn) argu;
        if(passOn.toPrint) {
            print("System.out.println(" + id + ");\n");
        }
        else {
            passOn.addToUse(id);
            e.nlic = true;
        }
        return (R) e;
    }

   /**
    * f0 -> AndExpression()
    *         | CompareExpression()
    *         | PlusExpression()
    *         | MinusExpression()
    *         | TimesExpression()
    *         | ArrayLookup()
    *         | ArrayLength()
    *         | MessageSend()
    *         | PrimaryExpression()
    */
    public R visit(Expression n, A argu) {
        return n.f0.accept(this, argu);
    }

   /**
    * f0 -> Identifier()
    * f1 -> "&"
    * f2 -> Identifier()
    */
    public R visit(AndExpression n, A argu) {
        PassOn passOn = (PassOn) argu;
        if(passOn.retString) {
            String id1 = (String) n.f0.accept(this, argu);
            String id2 = (String) n.f2.accept(this, argu);
            id1 += "&" + id2;
            return (R) id1;
        }
        else {
            Set<String> use = new HashSet<String>();
            String use1 = (String) n.f0.accept(this, argu);
            String use2 = (String) n.f2.accept(this, argu);
            use.add(use1);
            use.add(use2);
            return (R) use;
        }
    }

   /**
    * f0 -> ConstOrId()
    * f1 -> "<"
    * f2 -> ConstOrId()
    */
    public R visit(CompareExpression n, A argu) {
        PassOn passOn = (PassOn) argu;
        if(passOn.retString) {
            String id1 = (String) n.f0.accept(this, argu);
            String id2 = (String) n.f2.accept(this, argu);
            id1 += "<" + id2;
            return (R) id1;
        }
        else {
            Set<String> use = (Set<String>) n.f0.accept(this, argu);
            Set<String> use2 = (Set<String>) n.f2.accept(this, argu);
            use.addAll(use2);
            return (R) use;
        }
    }

   /**
    * f0 -> ConstOrId()
    * f1 -> "+"
    * f2 -> ConstOrId()
    */
    public R visit(PlusExpression n, A argu) {
        PassOn passOn = (PassOn) argu;
        if(passOn.retString) {
            String id1 = (String) n.f0.accept(this, argu);
            String id2 = (String) n.f2.accept(this, argu);
            id1 += "+" + id2;
            return (R) id1;
        }
        else {
            Set<String> use = (Set<String>) n.f0.accept(this, argu);
            Set<String> use2 = (Set<String>) n.f2.accept(this, argu);
            use.addAll(use2);
            return (R) use;
        }
    }

   /**
    * f0 -> ConstOrId()
    * f1 -> "-"
    * f2 -> ConstOrId()
    */
    public R visit(MinusExpression n, A argu) {
        PassOn passOn = (PassOn) argu;
        if(passOn.retString) {
            String id1 = (String) n.f0.accept(this, argu);
            String id2 = (String) n.f2.accept(this, argu);
            id1 += "-" + id2;
            return (R) id1;
        }
        else {
            Set<String> use = (Set<String>) n.f0.accept(this, argu);
            Set<String> use2 = (Set<String>) n.f2.accept(this, argu);
            use.addAll(use2);
            return (R) use;
        }
    }

   /**
    * f0 -> ConstOrId()
    * f1 -> "*"
    * f2 -> ConstOrId()
    */
    public R visit(TimesExpression n, A argu) {
        PassOn passOn = (PassOn) argu;
        if(passOn.retString) {
            String id1 = (String) n.f0.accept(this, argu);
            String id2 = (String) n.f2.accept(this, argu);
            id1 += "*" + id2;
            return (R) id1;
        }
        else {
            Set<String> use = (Set<String>) n.f0.accept(this, argu);
            Set<String> use2 = (Set<String>) n.f2.accept(this, argu);
            use.addAll(use2);
            return (R) use;
        }
    }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Identifier()
    * f3 -> "]"
    */
    public R visit(ArrayLookup n, A argu) {
        R _ret=null;
        PassOn passOn = (PassOn) argu;
        if(passOn.retString) {
            String id1 = (String) n.f0.accept(this, argu);
            String id2 = (String) n.f2.accept(this, argu);
            id1 = id1 + "[" + id2 + "]";
            return (R) id1;
        }
        else
            return (R) genJunkUse;
    }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> "length"
    */
    public R visit(ArrayLength n, A argu) {
        R _ret=null;
        PassOn passOn = (PassOn) argu;
        if(passOn.retString) {
            String id = (String) n.f0.accept(this, argu);
            id = id + ".length";
            return (R) id;
        }
        else
            return (R) genJunkUse;
    }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ArgList() )?
    * f5 -> ")"
    */
    public R visit(MessageSend n, A argu) {
        R _ret=null;
        PassOn passOn = (PassOn) argu;
        String pe;
        if(passOn.retString) {
            pe = (String) n.f0.accept(this, argu);
            String id = (String) n.f2.accept(this, argu);
            n.f3.accept(this, argu);
            String arg = (String) n.f4.accept(this, argu);
            pe = pe + "." + id + "(" + arg + ")";
            return (R) pe;
        }
        else {
            n.f4.accept(this, argu);
            return (R) genJunkUse;
        }
    }

   /**
    * f0 -> Identifier()
    * f1 -> ( ArgRest() )*
    */
    public R visit(ArgList n, A argu) {
        String arg1;
        PassOn passOn = (PassOn) argu;
        arg1 = (String) n.f0.accept(this, argu);
        passOn.addToUse(arg1);
        int i;

        Vector<Node> n1 = n.f1.nodes;
        for(i = 0; i < n1.size(); i++) {
            if(passOn.retString)
                arg1 += (String) n1.elementAt(i).accept(this, argu);
            else
                passOn.addToUse((String) n1.elementAt(i).accept(this, argu));
        }
        if(passOn.retString)
            return (R) arg1;
        else
            return (R) genJunkUse;
    }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
    public R visit(ArgRest n, A argu) {
        PassOn passOn = (PassOn) argu;
        String id = (String) n.f1.accept(this, argu);
        if(passOn.retString) {
            id = ", " + id;
            return (R) id;
        }
        else
            return (R) id;
    }

   /**
    * f0 -> IntegerLiteral()
    *         | TrueLiteral()
    *         | FalseLiteral()
    *         | Identifier()
    *         | ThisExpression()
    *         | ArrayAllocationExpression()
    *         | AllocationExpression()
    *         | NotExpression()
    */
    public R visit(PrimaryExpression n, A argu) {
        PassOn passOn = (PassOn) argu;
        if(passOn.toPrint) {
            if(n.f0.which == 0) {
                Integer in = (Integer) n.f0.accept(this,argu);
                return (R) in.toString();
            }
            return n.f0.accept(this, argu);
        }
        else {
            if(n.f0.which == 3) {
                String s = (String) n.f0.accept(this, argu);
                Set<String> use = new HashSet<String>();
                use.add(s);
                return (R) use;
            }
            int which = n.f0.which;
            if(which == 0 || which == 1 || which == 2)
                return (R) new HashSet<String>();
            else
                return n.f0.accept(this, argu);

        }
    }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
    public R visit(IntegerLiteral n, A argu) {
        return (R) Integer.valueOf(n.f0.toString());
    }

   /**
    * f0 -> "true"
    */
    public R visit(TrueLiteral n, A argu) {
        String id = "true";
        return (R) id;
    }

   /**
    * f0 -> "false"
    */
    public R visit(FalseLiteral n, A argu) {
        String id = "false";
        return (R) id;
    }

   /**
    * f0 -> <IDENTIFIER>
    */
    public R visit(Identifier n, A argu) {
        String id = n.f0.toString();
        //id = "LoopyTaco" + id;
        return (R) id;
    }

   /**
    * f0 -> Identifier()
    *         | IntegerLiteral()
    *         | TrueLiteral()
    *         | FalseLiteral()
    */
    public R visit(ConstOrId n, A argu) {
        PassOn passOn = (PassOn) argu;
        if(passOn.toPrint) {
            if(n.f0.which == 1) {
                Integer in = (Integer) n.f0.accept(this,argu);
                return (R) in.toString();
            }
            return n.f0.accept(this, argu);
        }
        else {
            if(n.f0.which == 0) {
                String s = (String) n.f0.accept(this, argu);
                Set<String> use = new HashSet<String>();
                use.add(s);
                return (R) use;
            }
            else
                return (R) new HashSet<String>();
        }
    }

   /**
    * f0 -> "this"
    */
    public R visit(ThisExpression n, A argu) {
        PassOn passOn = (PassOn) argu;
        if(passOn.retString) {
            String id = "this";
            return (R) id;
        }
        else
           return (R) genJunkUse;
    }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Identifier()
    * f4 -> "]"
    */
    public R visit(ArrayAllocationExpression n, A argu) {
        String id = (String) n.f3.accept(this, argu);
        PassOn passOn = (PassOn) argu;
        passOn.addToUse(id);
        if(passOn.retString) {
            id = "new int[" + id  + "]";
            return (R) id;
        }
        else
            return (R) genJunkUse;
    }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
    public R visit(AllocationExpression n, A argu) {
        String id = (String) n.f1.accept(this, argu);
        PassOn passOn = (PassOn) argu;
        if(passOn.retString) {
            id = "new " + id + "()";
            return (R) id;
        }
        else
            return (R) genJunkUse;
    }

   /**
    * f0 -> "!"
    * f1 -> Identifier()
    */
    public R visit(NotExpression n, A argu) {
        PassOn passOn = (PassOn) argu;
        String id = (String) n.f1.accept(this, argu);
        if(passOn.retString) {
            id = "!" + id;
            return (R) id;
        }
        else {
            Set<String> use = new HashSet<String>();
            use.add(id);
            return (R) use;
        }
    }

}
