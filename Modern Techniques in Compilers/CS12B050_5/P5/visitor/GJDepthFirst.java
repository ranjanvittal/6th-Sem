//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
    //
    // Auto class visitors--probably don't need to be overridden.
    //

    String variableStrings = "";
    String methodStrings = "";
    String className;
    boolean inClass;
    String methodString = "";
    String variableString = "";
    String overall = "";
    int temps = 0;
    String currentClass;

    Hashtable<String, Set<String>> dangerMethods  =  new Hashtable<String, Set<String>>();
    Hashtable<String, String> parentClass  =  new Hashtable<String, String>();
    Hashtable<String, Hashtable<String, String>> classMethods = new Hashtable<String, Hashtable<String, String>>();
    Hashtable<String, Hashtable<String, String>> classVariables = new Hashtable<String, Hashtable<String, String>>();
    Hashtable<String, Hashtable<String, MethodDeclaration>> classMethodDescription = new Hashtable<String, Hashtable<String, MethodDeclaration>>();


    class PassOn {
        Hashtable<String, Set<String>> passOnDangerMethods;
        Hashtable<String, Hashtable<String, String>> passOnClassMethods;
        Hashtable<String, Hashtable<String, String>> passOnClassVariables;
        Hashtable<String, Hashtable<String, MethodDeclaration>> passOnClassMethodDescription;
        public PassOn() {
            passOnDangerMethods = dangerMethods;
            passOnClassMethods = classMethods;
            passOnClassVariables = classVariables;
            passOnClassMethodDescription = classMethodDescription;
        }
    }


    public void makeClassMethodsAndVariables() {

        Enumeration<String> en = classMethods.keys();

        String klass;
        Hashtable<String, String> currentMethods;
        Hashtable<String, String> currentVariables;
        Hashtable<String, MethodDeclaration> currentMethodDescription;

        while(en.hasMoreElements()) {
            klass = en.nextElement();

            String parentKlass = klass;
            Hashtable<String, String> parentMethods;
            Hashtable<String, String> parentVariables;
            Hashtable<String, MethodDeclaration> parentMethodDescription;
            currentVariables = classVariables.get(klass);
            currentMethods = classMethods.get(klass);
            currentMethodDescription = classMethodDescription.get(klass);
            //System.out.println(parentKlass);
            while(parentClass.containsKey(parentKlass)) {
                parentKlass = parentClass.get(parentKlass);
                parentMethods = classMethods.get(parentKlass);
                parentVariables = classVariables.get(parentKlass);
                parentMethodDescription = classMethodDescription.get(parentKlass);

                Enumeration<String> en2 = parentMethods.keys();
                //System.out.println(parentKlass);
                while(en2.hasMoreElements()) {
                    String name = en2.nextElement();
                    //System.out.println(name);
                    if(!currentMethods.containsKey(name)) {
                        currentMethods.put(name, parentMethods.get(name));
                        currentMethodDescription.put(name,
                            parentMethodDescription.get(name)
                        );
                    }
                    else
                        dangerMethods.get(parentKlass).add(name);
                }

                Enumeration<String> en3 = parentVariables.keys();
                while(en3.hasMoreElements()) {
                    String name = en3.nextElement();
                    if(!currentVariables.containsKey(name))
                        currentVariables.put(name, parentVariables.get(name));
                }
           }
        }
    }

    public void print() {

        Enumeration<String> en = dangerMethods.keys();
        System.out.println("danger Methods :\n");
        while(en.hasMoreElements()) {
            String name = en.nextElement();
            System.out.println(name + " :\n");
            Set<String> s = dangerMethods.get(name);
            Iterator s1 = s.iterator();
            while(s1.hasNext()) {
                String s2 = (String) s1.next();
                System.out.println(s2);
            }
        }

        System.out.println("\nparent class :\n");
        en = parentClass.keys();
        while(en.hasMoreElements()) {
            String name = en.nextElement();
            String parent = parentClass.get(name);
            System.out.println(name + " : " + parent);
        }

        System.out.println("\nclass Methods :\n");
        en = classMethods.keys();

        while(en.hasMoreElements()) {
            String name = en.nextElement();
            System.out.println(name + " :");
            Hashtable<String, String> s = classMethods.get(name);
            Enumeration<String> en2 = s.keys();
            while(en2.hasMoreElements()) {
                String s2 = (String) en2.nextElement();
                System.out.println(s2 + " : " + s.get(s2));
            }
        }

        System.out.println("\nclass variables :\n");
        en = classVariables.keys();
        while(en.hasMoreElements()) {
            String name = en.nextElement();
            System.out.println(name + " :");
            Hashtable<String, String> s = classVariables.get(name);
            Enumeration<String> en2 = s.keys();
            while(en2.hasMoreElements()) {
                String s2 = (String) en2.nextElement();
                System.out.println(s2 + " : " + s.get(s2));
            }
        }

    }

    public void ptm(String a) {
        methodString +=  a;
    }

    public void ptm(Integer a) {
        methodString +=  a.toString();
    }

    public void ptv(String a) {
        variableString +=  a;
    }

    public void ptv(Integer a) {
        variableString +=  a.toString();
    }

    public String makeVar() {
        String temp = "temp" + String.valueOf(temps);
        variableString += "int " + temp + ";\n";
        temps++;
        return temp;
    }
    public void pto(String a) {
        overall +=   a;
    }
    public R visit(NodeList n, A argu) {
        R _ret = null;
        int _count = 0;
        for ( Enumeration<Node> e  =  n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
        }
        return _ret;
    }

    public R visit(NodeListOptional n, A argu) {
        if ( n.present() ) {
            R _ret = null;
            int _count = 0;
            for ( Enumeration<Node> e  =  n.elements(); e.hasMoreElements(); ) {
                e.nextElement().accept(this,argu);
                _count++;
            }
            return _ret;
        }
        else
            return null;
    }

    public R visit(NodeOptional n, A argu) {
        if ( n.present() )
            return n.node.accept(this,argu);
        else
            return null;
    }

    public R visit(NodeSequence n, A argu) {
        R _ret = null;
        int _count = 0;
        for ( Enumeration<Node> e  =  n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
        }
        return _ret;
    }

    public R visit(NodeToken n, A argu) { return null; }

    //
    // User-generated visitor methods below
    //

    /**
     * f0 -> MainClass()
     * f1 -> ( TypeDeclaration() )*
     * f2 -> <EOF>
     */
    public R visit(Goal n, A argu) {
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        makeClassMethodsAndVariables();
        //print();
        return (R) new PassOn();
    }

    /**
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "{"
     * f3 -> "public"
     * f4 -> "static"
     * f5 -> "void"
     * f6 -> "main"
     * f7 -> "("
     * f8 -> "String"
     * f9 -> "["
     * f10 -> "]"
     * f11 -> Identifier()
     * f12 -> ")"
     * f13 -> "{"
     * f14 -> ( VarDeclaration() )*
     * f15 -> ( Statement() )*
     * f16 -> "}"
     * f17 -> "}"
     */
    public R visit(MainClass n, A argu) {
        R _ret = null;
        inClass = false;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        n.f6.accept(this, argu);
        n.f7.accept(this, argu);
        n.f8.accept(this, argu);
        n.f9.accept(this, argu);
        n.f10.accept(this, argu);
        n.f11.accept(this, argu);
        n.f12.accept(this, argu);
        n.f13.accept(this, argu);
        n.f14.accept(this, argu);
        n.f15.accept(this, argu);
        n.f16.accept(this, argu);
        n.f17.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> ClassDeclaration()
     *         | ClassExtendsDeclaration()
     */
    public R visit(TypeDeclaration n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "{"
     * f3 -> ( VarDeclaration() )*
     * f4 -> ( MethodDeclaration() )*
     * f5 -> "}"
     */
    public R visit(ClassDeclaration n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        className = (String) n.f1.accept(this, argu);
        classVariables.put(className, new Hashtable<String, String>());
        classMethods.put(className, new Hashtable<String, String>());
        dangerMethods.put(className, new HashSet<String>());
        classMethodDescription.put(className, new Hashtable<String, MethodDeclaration>());
        n.f2.accept(this, argu);
        inClass = true;
        n.f3.accept(this, argu);
        inClass = false;
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "extends"
     * f3 -> Identifier()
     * f4 -> "{"
     * f5 -> ( VarDeclaration() )*
     * f6 -> ( MethodDeclaration() )*
     * f7 -> "}"
     */
    public R visit(ClassExtendsDeclaration n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        className = (String) n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        String parent = (String) n.f3.accept(this, argu);
        classVariables.put(className, new Hashtable<String, String>());
        parentClass.put(className, parent);
        classMethods.put(className, new Hashtable<String, String>());
        dangerMethods.put(className, new HashSet<String>());
        classMethodDescription.put(className, new Hashtable<String, MethodDeclaration>());
        n.f4.accept(this, argu);
        inClass = true;
        n.f5.accept(this, argu);
        inClass = false;
        n.f6.accept(this, argu);
        n.f7.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Type()
     * f1 -> Identifier()
     * f2 -> ";"
     */
    public R visit(VarDeclaration n, A argu) {
        R _ret = null;
        if(inClass) {
            String type = (String) n.f0.accept(this, argu);
            String variable = (String) n.f1.accept(this, argu);
            //System.out.println(className);
            Hashtable<String, String> classV = classVariables.get(className);
            classV.put(variable, type);
        }
        return _ret;
    }

    /**
     * f0 -> "public"
     * f1 -> Type()
     * f2 -> Identifier()
     * f3 -> "("
     * f4 -> ( FormalParameterList() )?
     * f5 -> ")"
     * f6 -> "{"
     * f7 -> ( VarDeclaration() )*
     * f8 -> ( Statement() )*
     * f9 -> "return"
     * f10 -> Identifier()
     * f11 -> ";"
     * f12 -> "}"
     */
    public R visit(MethodDeclaration n, A argu) {
        R _ret = null;
        String type = (String) n.f1.accept(this, argu);
        String method = (String) n.f2.accept(this, argu);
        classMethods.get(className).put(method, type);
        classMethodDescription.get(className).put(method, n);
        return _ret;
    }

    /**
     * f0 -> FormalParameter()
     * f1 -> ( FormalParameterRest() )*
     */
    public R visit(FormalParameterList n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Type()
     * f1 -> Identifier()
     */
    public R visit(FormalParameter n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> ","
     * f1 -> FormalParameter()
     */
    public R visit(FormalParameterRest n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> ArrayType()
     *         | BooleanType()
     *         | IntegerType()
     *         | Identifier()
     */
    public R visit(Type n, A argu) {
        return n.f0.accept(this, argu);
    }

    /**
     * f0 -> "int"
     * f1 -> "["
     * f2 -> "]"
     */
    public R visit(ArrayType n, A argu) {
        String type = "int[]";
        return (R) type;
    }

    /**
     * f0 -> "boolean"
     */
    public R visit(BooleanType n, A argu) {
        String type = "boolean";
        return (R) type;
    }

    /**
     * f0 -> "int"
     */
    public R visit(IntegerType n, A argu) {
        String type = "int";
        return (R) "int";
    }

    /**
     * f0 -> Block()
     *         | AssignmentStatement()
     *         | ArrayAssignmentStatement()
     *         | FieldAssignmentStatement()
     *         | IfStatement()
     *         | WhileStatement()
     *         | ForStatement()
     *         | PrintStatement()
     *         | MessageSendStatement()
     */
    public R visit(Statement n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "{"
     * f1 -> ( Statement() )*
     * f2 -> "}"
     */
    public R visit(Block n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> " = "
     * f2 -> Expression()
     * f3 -> ";"
     */
    public R visit(AssignmentStatement n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "["
     * f2 -> Identifier()
     * f3 -> "]"
     * f4 -> " = "
     * f5 -> ConstOrId()
     * f6 -> ";"
     */
    public R visit(ArrayAssignmentStatement n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        n.f6.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "."
     * f2 -> Identifier()
     * f3 -> " = "
     * f4 -> Identifier()
     * f5 -> ";"
     */
    public R visit(FieldAssignmentStatement n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "if"
     * f1 -> "("
     * f2 -> Identifier()
     * f3 -> ")"
     * f4 -> Statement()
     * f5 -> "else"
     * f6 -> Statement()
     */
    public R visit(IfStatement n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        n.f6.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "while"
     * f1 -> "("
     * f2 -> Identifier()
     * f3 -> ")"
     * f4 -> Statement()
     */
    public R visit(WhileStatement n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "for"
     * f1 -> "("
     * f2 -> Identifier()
     * f3 -> " = "
     * f4 -> Expression()
     * f5 -> ";"
     * f6 -> Expression()
     * f7 -> ";"
     * f8 -> Identifier()
     * f9 -> " = "
     * f10 -> Expression()
     * f11 -> ")"
     * f12 -> Statement()
     */
    public R visit(ForStatement n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        n.f6.accept(this, argu);
        n.f7.accept(this, argu);
        n.f8.accept(this, argu);
        n.f9.accept(this, argu);
        n.f10.accept(this, argu);
        n.f11.accept(this, argu);
        n.f12.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "System.out.println"
     * f1 -> "("
     * f2 -> ConstOrId()
     * f3 -> ")"
     * f4 -> ";"
     */
    public R visit(PrintStatement n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> ( InlineAnn() )?
     * f1 -> ( VoidMessageSendStmt() | RetMessageSendStmt() )
     */
    public R visit(MessageSendStatement n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> MessageSend()
     * f1 -> ";"
     */
    public R visit(VoidMessageSendStmt n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> " = "
     * f2 -> MessageSend()
     * f3 -> ";"
     */
    public R visit(RetMessageSendStmt n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> <SCOMMENT1>
     * f1 -> <INLINE>
     * f2 -> <SCOMMENT2>
     */
    public R visit(InlineAnn n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> AndExpression()
     *         | CompareExpression()
     *         | PlusExpression()
     *         | MinusExpression()
     *         | TimesExpression()
     *         | ArrayLookup()
     *         | ArrayLength()
     *         | PrimaryExpression()
     */
    public R visit(Expression n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> ConstOrId()
     * f1 -> "&"
     * f2 -> ConstOrId()
     */
    public R visit(AndExpression n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> ConstOrId()
     * f1 -> "<"
     * f2 -> ConstOrId()
     */
    public R visit(CompareExpression n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> ConstOrId()
     * f1 -> "+"
     * f2 -> ConstOrId()
     */
    public R visit(PlusExpression n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> ConstOrId()
     * f1 -> "-"
     * f2 -> ConstOrId()
     */
    public R visit(MinusExpression n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> ConstOrId()
     * f1 -> "*"
     * f2 -> ConstOrId()
     */
    public R visit(TimesExpression n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "["
     * f2 -> ConstOrId()
     * f3 -> "]"
     */
    public R visit(ArrayLookup n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "."
     * f2 -> "length"
     */
    public R visit(ArrayLength n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "."
     * f2 -> Identifier()
     * f3 -> "("
     * f4 -> ( ArgList() )?
     * f5 -> ")"
     */
    public R visit(MessageSend n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> ( ArgRest() )*
     */
    public R visit(ArgList n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> ","
     * f1 -> Identifier()
     */
    public R visit(ArgRest n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> IntegerLiteral()
     *         | TrueLiteral()
     *         | FalseLiteral()
     *         | Identifier()
     *         | ThisExpression()
     *         | ArrayAllocationExpression()
     *         | AllocationExpression()
     *         | NotExpression()
     */
    public R visit(PrimaryExpression n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> <INTEGER_LITERAL>
     */
    public R visit(IntegerLiteral n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "true"
     */
    public R visit(TrueLiteral n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "false"
     */
    public R visit(FalseLiteral n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> <IDENTIFIER>
     */
    public R visit(Identifier n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        String s  =  n.f0.toString();
        s  =  "funkyTaco" + s;
        return (R) s;
    }

    /**
     * f0 -> Identifier()
     *         | IntegerLiteral()
     *         | TrueLiteral()
     *         | FalseLiteral()
     */
    public R visit(ConstOrId n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "this"
     */
    public R visit(ThisExpression n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "new"
     * f1 -> "int"
     * f2 -> "["
     * f3 -> Identifier()
     * f4 -> "]"
     */
    public R visit(ArrayAllocationExpression n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "new"
     * f1 -> Identifier()
     * f2 -> "("
     * f3 -> ")"
     */
    public R visit(AllocationExpression n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "!"
     * f1 -> Identifier()
     */
    public R visit(NotExpression n, A argu) {
        R _ret = null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        return _ret;
    }

}
